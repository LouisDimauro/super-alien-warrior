pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- game super alien warrior.
-- by louis


testlevel3='130014501E8028121EE00A1EE06F502E8028122CE02C32502C5034003012330034385034223C00280224300300222A80180222200580222480580221980081211600300211500300221180300220C0050050460020124480244AE0241405004811220805012428003004280057280008288008288057253E8018043DC0213DC018440018440021224800580A050400010468010603140C0B400F473"~5!)*~R!)*~N!)*~Y!"!!"~5!9:~D!)*~-!9:~B!)*~+!9:~C!)*~$!-~.!)*!"!!"~\'!)*~R!9:~C!)*~,!9:~O!9:!!+,~.!9:!"!!"~\'!9:~8!~$Z~*!)*A~\'BC~-!~%Z~9!9:~P!)*~0!<~(!tqu~\'!"!)"~?!A~$BC~)!9:!l~%mn~.!ABBC~j!9:~0!<~(!syw~\'!"!9"~-!)*~2!lmn~-!l~%mn~/!ln~/!A~%BC~T!)*~)!%%~)!<~&!tq~$rqu~%!"!!"!t~$qu~\'!9:~2!lmn~\'!)*~%!l~%mn~,!)*!ln~0!lmmn~U!9:~)!%%~)!<~&!szzvzzw~%!"!!"!s~$xw~:!lmn~&!A~%BC!l~%mn~,!9:!ln~0!lmmn~<!A~\'BC~:!~%%~)!<~&!s~&zw~%!"!!"!syxyw~6!A~(BC~%!lmmn!!l~%mn~/!ln~0!lmmn~=!~\'m~&!ABBC!!ABBC~,!~%%~)!<~$!tq~(rqu!!"!!"t~&ru!!$!$!$!$!$!$~)!l~&mn~&!lmmn!!l~%mn!)*~,!ln~(!ABC!!)*!lmmn~/!)*~-!~\'m~\'!ln~%!ln~+!~\'%~)!<~$!s~$zvzv~$zw!!"!!"s~&xw~6!l~&mn~&!lmmn!!l~%mn!9:~*!$!ln~)!o~$!9:!lmmn~/!9:~&!~$Z~%!~\'m~\'!ln~%!ln~+!~\'%~)!<~$!s~*zw!!"!!"sx{v|xw~6!l~&mn!!Z!!lmmn!!l~%mn~/!ln~)!o~\'!lmmn~5!A~$BC~$!~\'m~\'!ln~%!ln~+!~\'%~)!<~$!szzvzvzvzzw!!"!!"sx{v|xw~.!A~$BC~$!l~&mn!ABC!lmmn!!l~%mn~/!ln~)!o~\'!lmmn~6!lmn~%!~\'m~\'!ln~%!ln~+!~\'%~)!%~$!szzvzvzvzzw!!"!!~3#~%!lmn~%!l~&mn!!o!!lmmn!!l~%mn~%!ABBC~%!A~$BC!A~$BC!o~\'!lmmn~6!lmn~%!~\'m!!ABC!ln~%!ln~%!~[#~%!lmn~%!l~&mn!!o!!lmmn!!l~%mn~&!ln~\'!lmn~$!lmn!!o~\'!lmmn~6!lmn~%!~\'m~$!o!!ln~%!ln~%!~I#'

testlevel2='120124120500481210880580210800600210E80600150E80401131700381221600580221700580122300401152500401221E00580211F806002120806002125002002127004002128004002A34804012A37803812133006002134006002132006002A3A80481124B8040123498058021398060021450040021440048050468068124680664680625046803812468034468032504E0040124E003C4E0039504E0010124E000D4E000AB0590028115Welcome to warp zone!B05900401014B05B00401013B05D004010129052C04810408030A0311300C800F38EUIJ~$!TUT~{Q~IQ~Y!~&"UY~%!TUT~{Q~IQ~Y!~&"U~&!~{T~GTU~%T~8!UUTTU~5T~$!~+TU~&!~1Q!~/Q~2!TT~$!T~&UIJUUTT~\'!UTTUUIJ~)!~/Q~-!~/Q~E!78~&TUUIJ~,!T~+U~\'!~&Q./~%Q~\'!~&Q./~%Q~4!TT~$!~&TUY!U~$T~\'!~&UY~+!~&Q./~%Q~0!~&Q./~%Q~G!78T~\'UY~-!T~+U~)!QQ=>?@QQ~*!QQ=>?@QQ~(!~%Z~(!UT~*!TU~$!T~%!UT~,!~\'Z~$!QQ=>?@QQ~3!QQ=>?@QQ~H!78T~\'U~.!T~+U~*!QMNOPQ~,!QMNOPQ~4!UT~*!TU~$!T~%!UT~6!QMNOPQ~5!QMNOPQ~I!78T~\'U~.!T~+U~+!Q^_Q~.!Q^_Q~(!U!~%T!T~&!UT~*!TU~$!T~%!UT~,!U~%TU~&!Q^_Q~7!Q^_Q~J!78T~\'U~.!T~+U~=!U~*!UZU!!UZT~&!UT~&!~%ZTU~$!TZU!!UT~,!U~&T~X!UTUTT~/!G~$HT~\'U~.!T~+U~*!~&$~)!1!1~.!~$U!!UTT~&!U~$T~$!UU~$TU~$!~$T!!TT!!~$UTT~>!\'(~9!11~<!W~$XT~\'U~.!T~+U~5!1!1!1!1~$!1~7!UT~R!\'(~%!78~,!UU~+!~$1~7!~+T~\'U!\'(!!\'(!!\'(!!T~+U~3!1!1!1!1!1~$!1!1~5!UT~R!78~%!78~%!\'(~&!UU~*!~%1~7!~1U!78!!78!!78!!T~+U~1!1!1!1!1!1!1~$!1!1~h!78~%!78~%!78~&!UU~)!~&1~7!~1U!78!!78!!78!!~+T~s5~$!~F5!!55!!~,5~)!~(5~(!~{5~@5~$!~F5!!55!!~,5~)!~(5~(!~H5'

testlevel='110019142080401122800481153000481212A00200212B00200213180600213280600223700580133400481123800281213A80600213B80600214180600213F00600214280600214000600215980600215880600210B80600120B00481211480601211A00600211B00600901D404400804020003111A065400010460020003120C0E100F30A~{!~=!)*~{!~/!"~T!)*~/!)*~4!)*!)*~:!9:~s!-~6!"~5!)*~:!)*!!9:~/!9:~*!)*~)!9:!9:~/!)*~2!)*!)*~\'!)*)*~N!)*)*~,!+,!)*~3!"~5!9:~*!)*!)*~,!9:~:!)*!!9:~<!9:~2!9:!9:~\'!9:9:~N!9:9:~-!<!9:~3!"~@!9:!9:~G!9:~r!)*~C!D~)!<~6!"~(!)*~/!$~[!~)S~$!~$S$~0!$~,!~$S~%!S$$S~7!9:~B!DD~)!<~6!"~(!9:~{!~{!!!~$D~)!<~%!tqqu~.!"~{!~{!~+!~%D~)!<~%!sxxw~.!"~b!$~{!~B!~&D~)!<~%!syyw~.!"~2!$~$!S$S$S~6!\'(~*!\'(~4!S$S~/!S~\'!SS~%!$!!$!!$~&!S~+!SS~\'!D!!D~+!DD!!D~-!SS$S~.!~\'D~)!<~$!t~%ru~-!"~H!\'(~\'!78~*!78~p!DD!!DD~)!~$D!!DD~<!~(D~)!<~$!s~%xw~-!"~>!\'(~)!78~\'!78~*!78~o!~$D!!~$D~\'!~%D!!~$D~&!\'(~0!\'(!~)D~)!<~$!sxvvxw~-!"~$!ghi~,!ghi~\'!ghi78~)!78!ghi!!78!!ghi~%!78!!ghi~)!ghi~1!ghi~;!ghi~.!~%D!!~%Dghi!~&D!!~%Dhi!!78~0!78~*D~$!ghi!!D~$!sxvvxw~&!ghi~%!"~h#!!~0#~$!~S#!!~.#!!~{#~Q#!!~0#~$!~S#!!~.#!!~d#'

testlevel_0 = '1111019006405D10407A60A03110001000F06F~AQU~$Q~)U~$Q7UQQ~+!QQ7UQ~-!Q7U~%!~&Z~&!7U~/!7U~$!~(Z~%!7U~/!7U~$!~(Z~%!7U~$!~(U~%!7U~$!~(U!!GHHU~$!~(U!!WXX~A5'

testlevel4 = '140110B04D0028110thank you mario!B04C0038118but your princess is in B04D004010Fanother castle!2F47803805046803012431030498030120F00301C00F00505C01800305C01D80305C02100305C02600485C02A00485C02C0020BC0280020DC02E0048AC0128030100AC00F2FA~{!~s!~{3~r3!~g3~=4~(3~84~&3~D4~$3!~;3~,!~B34~*!4~(!4~)!4~(34~.e!!de~%!4~&34~/!44~2d4~$3!~;4~,!~B34~*!4~(!4~)!~*4~.e!!de~%!~(4~/!44d~0ad4~$3~*!de!!de!!de!!de!!d4~,!~C4~C!de~+aee!!de~&!de~3!44da~.!ad4~$3~*!de!!de!!de!!de!!de~%!$~\'!%~+!%~+!%~\'!%~G!deaa~\'!aaee!!de~&!de~4!dda~.!ad4~$3!~&4~$!de!!de!!de!!de!!de~p!dea!!Z!Z!Z!aee!!de~&!de~4!dda~.!ad4~$3!~&34!!de!!de!!de!!dd!!de~p!dea~)!aee!!de~&!de~4!dda~.!ad4~$3!~\'34!de!!de!!de!!dd!!de~*!~E4~&!4~(!4~(!4~-!dea!Z!Z!Z!!aee!!de~&!de~2!~$4da~.!ad4~$3!~(3~(4!!~+4~$!3%3~$!4~C3~E4eaa~\'!aae~\'4~$!~(4~.V434da~.!ad4~$3!~.34!!4~)34~$!~$3~$!4~f34e~+ae4~%34~$!4~&34~.!434d~0ad4~$3!~.34!!4~)34~$!~$3~$!4~f34~-e4~%34~$!4~&34~.!434~2d4~$3!~.34KK4~)34~$K~$3~$K4~f3~/4~%3~&4~&34~.K43~44~$3!~.34[[4~)34~$[~$3~$[4~{3~(34~.[4~83!'

level_finish = '1130022A0180481A00B300010560030A03130C02300F101""~<!"~&!""~%!)*~.!+,!)*~$!"~&!"~&!9:~/!<!9:~$!"~&!"~6!<~\'!"~&!"~6!<~\'!"~&!"~,!DD~)!<~\'!"~&!"~+!~$D~)!<~%!tqqu~%!"~*!~%D~)!<~%!sxxw~%!"~)!~&D~)!<~%!syyw~%!"~(!~\'D~)!<~$!t~%ru~$!"~\'!~(D~)!<~$!s~%xw~$!"!!\'(!~)D~)!<~$!s{vv|w~$!"!!78~*D~)!%~$!s{vv|w~$!~g#'

levels ={
	testlevel,
	testlevel_0,
	testlevel2,
	level_finish,
	testlevel3,
	testlevel4
}

function array(str)
  local result = {}
  local num = ""
  for i = 1, #str do 
    local val = sub(str,i,i)
    if val == "," then 
        add(result, num + 0)
        num = ""
    else
        num = num .. val
    end 
  end 
  add(result, num + 0)
  return result
end

-- constants 
--music_ow = 0
--music_uw = 11
--music_star = 24
--music_castle = 55

-- sounds
--jump_sounce= 7
--destroy_sound= 8
--coin_sound = 9
--life_sound = 10
--special_sound = 11
--kick_sound = 12
--sound_fireball= 13

-- flag constants
--bit_colli_bottom= 1
--bit_colli_top = 2
--bit_colli_vertical = 4
--bit_coin = 32
--bit_vine = 64
--bit_question_mark = 16-- 00010000
--bit_destructable = 8-- 00100000
--bit_mask_colli = 7--11000000
--bit_mask_info = 56 --00110000

--solid_invisible_block = 1

--tentity_player = 0
--tentity_item= 1
--tentity_enemy = 2
--tentity_particle = 3
--tentity_fireball= 4
--tentity_moving_platform = 5
--tentity_moving_turtle_shell = 6
--tentity_pulley_patform = 7
--tentity_jump_pad = 8
--tentity_vpipe = 9
--tentity_finish = 10
--tentity_label = 11
--tentity_fire_bar = 12

--titem_mushroom = 1
--titem_flower= 2
--titem_star = 3
--titem_life= 4
--titem_coin = 5
--titem_beanstalk= 6

--tenemy_goomba= 1
--tenemy_koopa_troopa_green = 2
--tenemy_koopa_toopa_red = 3
--tenemy_koopa_paratroopa_green = 4
--tenemy_koopa_paratroopa_red  = 5
--tenemy_buzzy_beetle = 6
--tenemy_hammer_brother = 7
--tenemy_spiney = 8
--tenemy_lakitu = 9
--tenemy_pirana_plant = 10
--tenemy_cheep_cheep = 11
--tenemy_bullet_bill = 12
--tenemy_bloober = 13
--tenemy_podoboo = 14
--tenemy_browser= 15
--tenemy_fire_bar= 16

-- physics constants
const_frame_time = 0.0166667
physics_gravity = 6.98--5.625--8.3--7.8--5.625-- 9.405
physics_max_x_vel_walk = 0.781--0.65 --0.625
physics_max_x_vel_run = 1.35--1.125
physics_max_x_vel_sprint = 1.5
physics_accel = 0.046875
physics_stop_deccel = 0.03125*2
physics_skid_deccel_walk = 0.078125/2
physics_skid_deccel_run = 0.15625/2
physics_air_accel = 0.046875
physics_climbing_vel = 0.5

----------------------------------------------
-- global variables

-- structure containing level item data
-- loaded from data string
hidden_items = 
{
	-- {x,y,type[,data]}
}

mp = nil
last_max_vel = physics_max_x_vel_walk
was_jump = false
was_fas_move = false
movdir = false
cam_x = 0
game_level = 3
level_up_timer = nil
level_up_index = 1
jump_ticks = 0
was_grounded = true
max_air_vel = 0.75

level_info = {
	level = testlevel,
	dx = 32,
	dy = 88,
	music = 0
}

-- tilemap
tilemap_backcolor = 0
tilemap_width = 0
tilemap_height = 15
tilemap = {}

function play_music(id)
	music( id == 0 and 0 or ( id == 1 and 11 or 55))
end 

play_music(0)

----------------------------------------------

--[[
function p_fade_out()
	local pw=2 
	while pw < 128 do
		for x=0,127,pw do
			for y=0,127,pw do
				rectfill(x,y,x+pw-1,y+pw-1,pget(x+rnd(pw),y+rnd(pw)))
			end
		end
		sleep(35)
		pw *= 2
	end
end

function p_fade_in()
	local pw=128
	while pw > 1 do
		cls()
		draw()
		for x=0,127,pw do
			for y=0,127,pw do
				rectfill(x,y,x+pw-1,y+pw-1,pget(x+rnd(1)*pw,y+rnd(1)*pw))
			end
		end
		pw = flr(pw/2)
		sleep(35)
	end
end --]]

function get_item(x,y)
	for i in all(hidden_items) do
		if i.x == x and i.y == y then 
			return i
		end 
	end
	return nil
end 

function add_item(type, x,y)
	if type == 1 or type == 2 then 
		if mp.level == 0 then
			new_mushroom(x,y)
		else
			new_flower(x,y)
		end
	elseif type == 4 then 
		new_life(x,y)
	elseif type == 3 then 
		new_star(x,y)
	elseif type == 5 then 
		player_add_coin(x/8,y/8,true)
	elseif type == 6 then 
		new_beanstalk(x, y)
	end 
end 

function new_player(x,y)
	local p = entity_new(x,y,8,16,0,0.1,0)
	p:set_padding(1,1)
	p.finish = false
	p.onvine = false
	p.grounded = false
	p.duck = false
	p.hdir = 1
	p.timer = 300
	p.coins = 0
	p.lives = 3
	p.points = 0
	p.level = 1
	p.is_super = 0
	p.invincible = 0
	p.skidding = false
	p.standing_on = nil
	p.fast_move_frames = -1
	p.movedown = false
 	p.physics = true
	p.anim_walk_small =  new_anim(array"129,130,131,132,133",1,1, 0.25,1)
	p.anim_walk_big =  new_anim(array"97,98,99",1,2, 0.25,1)
	p.anim_stand_small =  new_anim({128},1,1, 0.25,0)
	p.anim_stand_big =  new_anim({96},1,2, 0.25,0)
    p.anim_skidding_big = new_anim({100},1,2, 0.25,0)
    p.anim_jump_big = new_anim({101},1,2, 0.25,0)
	p.anim_duck = new_anim({198},1,1, 0.25,0)
	p.anim_middle = new_anim({102},1,2, 0,0)
	p.transform_enabled = -1
	p.color_anim = new_color_anim(0.047,{array"1,13,7,8",array"5,7,6,8",array"1,2,5,9",array"2,14,7,11",array"1,2,5,9"})
	p.anim = p.anim_stand_big

	-- climbing animation
	p.climb_anim_small = new_anim({175}, 1,1,0.25,0)
	p.climb_anim = new_anim({111},1,2, 0.25,0)
	p.climb_anim_flip = false
	p.climb_anim_timer =  new_frametimer(0.1)
	p.climb_vx = 0
	p.climb_vy = 0

	p.draw = function(o)
		if not mp.is_alive then 
			return
		end 
		if mp.invincible > 0 then 
			mp.invincible-=1
			if mp.invincible % 2 == 0 then 
				return 
			end 
		end 

		-- tranform to big mario(using magic mushroom)
		if mp.level == 1 and o.transform_enabled >= 0 then
			local sizes = array"1,2,1,2,1,2,3,1,2,3,1,3"
			if level_up_timer:tick() then 
				level_up_index = level_up_index > 12 and 12 or level_up_index +1
			end 

            local anim = sizes[level_up_index] == 1 and mp.anim_stand_small 
            or (sizes[level_up_index] == 2 and mp.anim_middle or mp.anim_stand_big)

			anim:draw(mp.x,mp.y - (mp.anim_stand_small != anim and 8 or 0), movdir, false)
			o.transform_enabled-=1
			if o.transform_enabled < 0 then
				level_up_index = 1
				mp.y-=8
			end 
		else	
            if mp.is_super>0 or ( mp.level == 2 and mp.transform_enabled >= 0) then 
                -- blink palete animation 
                mp.color_anim:apply()
                mp.is_super-=1
                mp.transform_enabled-=1
				if mp.is_super==30 then
					play_music(level_info.music)
				end 
            elseif o.level == 2 then 
                -- change blue to white, if fiery mario
                pal(1,5)
                pal(13,7)
                pal(7,6)
                pal(8,8)
            end 
			
			local flip = movdir
			if mp.onvine then 
				flip = mp.climb_anim_flip
			end 
			o.anim:draw(o.x,o.y, flip, false)
            pal()
        end 
	end
	p.update = function(e)
		if mp.movedown then
			mp.y+=8
			mp.movedown = false
		end 
		
		local newAnim = mp.onvine and ( mp.level == 0 and mp.climb_anim_small or mp.climb_anim) or(
				mp.level == 0 and (e.vx  == 0 and mp.anim_stand_small or p.anim_walk_small) 
				or (mp.duck and mp.anim_duck 
				or (not e.grounded and mp.anim_jump_big 
				or (e.skidding and mp.anim_skidding_big 
				or (e.vx  == 0 and mp.anim_stand_big or mp.anim_walk_big)))))

		if newAnim !=  mp.anim then 
			if newAnim == mp.anim_duck then
				mp.y+=8
			elseif mp.anim == mp.anim_duck then 
				mp.y-=8
			end 
		end 
		
		mp.anim = newAnim
		mp.h = (mp.level == 0 and 8 or (mp.duck and 8 or 16))
		mp.anim.timer.delay = const_frame_time * (12 / (1+1.5*abs(mp.vx))) 
		mp.anim:update()

		-------------------------------------
		-- climbing:
		-- if on magic vine, use climb velocity and animate 
		-- the climb anim by flipping the image back and forth

		local onvine = fget(_mget(flr((mp.x+4)/8),flr((mp.y+4)/8)),6) 
		if not mp.onvine and onvine and btn(2) then 
			mp.onvine = true
			mp.climb_vy = 0
			mp.climb_vx = 0
		elseif mp.onvine and not onvine then 
			mp.onvine = false
			mp.vy = 0.01
		end 
		if mp.onvine then 
			mp.vy = mp.climb_vy
			mp.vx = mp.climb_vx
			mp.h = mp.level > 0 and 16 or 8
			if mp.climb_vx != 0 or mp.climb_vy != 0 then
				if  mp.climb_anim_timer:tick() then 
					mp.climb_anim_flip = not mp.climb_anim_flip
				end 
			end 
		end 

		-------------------------------------

		e:update_physics()

		
		if e.y >128 then 
			 kill_player()
		end 
		return e.is_alive 
	end 

	p.on_bitcheck = function(self,mx,my,bits)
		if bits == 32 then 
			player_add_coin(mx,my,false); 
			_mset(mx,my,0); 
		end 
	end
	--p.on_hcolli = function(e,obj, pmx, pmy)
		-- if mp.vy > 0 and not mp.grounded and mp.fast_move_frames > 0 then
		--	local px = mp.lastvx < 0 and 1 or -1
		--	if band(fget(_mget(pmx+px,pmy)),1) == 1 then
		--		obj.grounded = true 
		--		obj.vy = 0.01
		-- 		obj.y =(pmy-obj.h / 8) * 8
		--		mp.vx = mp.lastvx
		--		mp.x = mp.lastx + mp.vx
		--	end 
		-- end 
	--end 
	p.on_vcolli = function(e,pmx, pmy)

			if mp.vy < 0 then

				local id = _mget(pmx,pmy-1)
				local bits =  band(fget(id),56)
                local bounce = false

				local item = get_item(pmx,pmy-1);
				if bits == 16 then 

					if item == nil then 
						player_add_coin(pmx,pmy-1,true)
					end 
					new_block_bounce(pmx,pmy-1,item,3,4)
					bounce = true

				elseif bits == 8 then 
	

					if item != nil then
						
						_mset(pmx,pmy-1,4)
						add_item(item.type,pmx*8, (pmy-1)*8);
					
					elseif mp.level == 0 then 

						new_block_bounce(pmx,pmy-1,item,id,id)

					else
					
						sfx(8)	
						_mset(pmx,pmy-1,0)

                        local sy = flr(id/16)
                        local sx = id - sy*16
                        local c = sget(2+sx*8,3+sy*8)-- color of destroyed block
						new_destroy_effect(pmx*8+4,(pmy-1)*8+4,c)
					end 
					
                    bounce = true

				end 
				
                if bounce then 
					foreach(entity_list, function(p)
						local x0,y0,w0,h0 = get_boundingbox(p)
						if rect_overlap(pmx*8+1,(pmy-2)*8+1,6,6, x0,y0,w0,h0) then
							if p.type == 2 then 
								hit_kill(p)
							else
								p.vy = -2.85
							end 
							return
						end 
					end)
                end 
			end	 
	end 
	entity_add(p)
	return p
end 

function player_add_coin(mx,my, points)
	sfx(9)
	new_coin_effect(mx*8,my*8-8)--coin anim
	if points then
		add_points(100,mx*8,my*8-8)-- todo: "add points", not show anim--false param
	end 
	mp.coins+=1
	if mp.coins >99 then 
		mp.coins = 0
		mp.lives+=1
		sfx(10)
	end 
end 


function get_boundingbox(obj)
	return 	obj.x+obj.pw,obj.y+obj.ph,obj.w-obj.pw*2,obj.h-obj.ph*2
end 

function player_input()

	mp.duck = btn(3)

	local move_fast = btn(4)
	local move_left = not mp.duck and btn(0)  
	local move_right = not mp.duck and btn(1) 
	local max_move = physics_max_x_vel_walk
	local move_a = physics_accel
	local skid_deccl = physics_skid_deccel_walk

	if move_fast then 
		-- use run acceleration
		mp.fast_move_frames = 10
		max_move = physics_max_x_vel_run
		move_a = physics_accel
		skid_deccl = physics_skid_deccel_run

	elseif mp.fast_move_frames > 0 and (move_left == movdir or move_right == movdir) then
		-- if stop holding 'b', but continue holding current movement direction
		-- keep moving at run speed for 10 frames: 
		-- don't lose speed by firing fireballs while running!

		mp.fast_move_frames-=1
		max_move = physics_max_x_vel_run
		move_a = physics_accel
		skid_deccl = physics_skid_deccel_run

	else 
		mp.fast_move_frames = 0
	end 
	-- air velocity
	if was_grounded and not mp.grounded then 
		local dv = physics_max_x_vel_run - physics_max_x_vel_walk
		local x = min(dv, 2.5 * max(0,abs(mp.vx) - physics_max_x_vel_walk) )
		max_air_vel = x + physics_max_x_vel_walk
	elseif not mp.grounded then 
		max_move = max_air_vel
	end 

	mp.skidding = (move_left and mp.vx > 0) or (move_right and mp.vx < 0)
	local vel = (mp.skidding and skid_deccl or (not mp.grounded and physics_air_accel or move_a))
	
	if move_left or move_right then 
		-- left movement
		-- right movement

		mp.vx += (move_left and -vel or vel)
		movdir = move_left

	else
		-- slowing down
		local sldf =  0.999
		if mp.grounded then
			sldf = abs(mp.vx) > 0.15 and  0.9 or 0
		else
			max_move = physics_max_x_vel_walk
		end 
		mp.vx*=sldf
	end

    -- shoot
	if move_fast then 
		if not was_fast_move and mp.level == 2 then 
			local f = movdir and 0xfffa or 6
			fireball_new(mp.x + f, mp.y + 4 , f / 3.5 )
			sfx(13)
		end 
	end 

	-- max velocity
    -- lerp max speed after switching from fast to slow move
	if max_move < last_max_vel then 
		last_max_vel*=0.95
		max_move = last_max_vel
	else
		last_max_vel = max_move
	end 
	mp.vx = min(max_move, max(-max_move,mp.vx))

	-- allow jump a few frames 
	-- before hitting the ground
    local jump = btn(5)
	jump_ticks = jump and jump_ticks+1 or 0

	-- jump on if grounded
	-- allow jump a few frames after grounded
	if mp.grounded or mp.airtime < 5 then

		if (jump_ticks < 5 or not was_jump) and jump then		
			player_jump()
		end 
	
	--controlling jump height:
	--stop upward movement in jump
	--when "a" was released
	elseif  was_jump and not jump and mp.vy < 0 then 
        mp.vy*=0.25
	end 

	if mp.onvine then 
		if move_left then 
			mp.climb_vx = -physics_climbing_vel
		elseif move_right then 
			mp.climb_vx = physics_climbing_vel
		else
			mp.climb_vx = 0
		end 
		if btn(2) then 
			mp.climb_vy = -physics_climbing_vel
		elseif btn(3) then 
			mp.climb_vy = physics_climbing_vel
		else
			mp.climb_vy = 0
		end 
		if not was_jump and jump then 
			player_jump()	
		end 
	end 

    was_jump = jump
	was_fast_move = move_fast
	was_grounded = mp.grounded
end

function player_jump()
	jump_ticks = 5	
	mp.onvine = false
	mp.airtime = 5		
	mp.vy = -2.8*(abs(mp.vx)*0.15+1)   
	sfx(7)	
end 

function player_vs_vpipe(mp,p) 

	p.selected = true
	if mp.finish then 
		return 
	end 

	if ((mp.duck and p.type == 9 and not p.horizontal) or 
		p.type == 9 and p.horizontal) or 
		p.type == 10 then 
		
		for i = 1, #levels do 
			local id = sub(levels[i],1,3)
			if id == p.target then 
			
				level_info = {
					level = levels[i],
					dx = p.dx,
					dy = p.dy,
				}

				if p.type == 10 then 
					add_points(flr(((104-mp.y)/104)*10)*500,mp.x,128)
					finish_state = 0
					mp.finish = true 
					music(-1)
				else
					mp.physics = false
					load_level(levels[i],p.dx,p.dy)
				end 
				return 
			end 
		end 
		
	end 
end 

function player_vs_item_colli(mp,p)
	if p.item_type == 1 then 
		mp.transform_enabled = 60
		mp.level = 1
		if mp.vy < 0 then 
			mp.vy = -2.8
		end 
		sfx(11)
	elseif p.item_type == 2 then 
		mp.transform_enabled = 60
		mp.level = 2
		sfx(11)
	elseif p.item_type == 3 then 
		mp.is_super = 750
		music(24)
	elseif p.item_type == 4 then  
		mp.lives+=1
		sfx(10)
	end 
	add_points(1000,mp.x,mp.y)
	entity_delete( p)
end 

function player_vs_enemy_colli(mp,p)

	if p.t > 0 and p.is_alive then  
		if mp.vy > 0 and not mp.grounded and p.killable and p.jumpable then 
			
			kill_enemy(p)
			mp.y-=mp.vy
			mp.vy = -2
			
		elseif p.status != nil and p.status == 2 then 
	
			sfx(12)
			p:hit( mp.x < p.x and -2 or 2) 
	
		elseif mp.is_super>0 and p.killable then 

			hit_kill(p)

		elseif mp.invincible <= 0 then 

			mp.vx = 0 
			mp.level-=1
			mp.movedown = mp.level == 0
			if mp.level < 0 then
				sleep(500)
				kill_player()
			else
				mp.invincible = 90
				pause_gameplay = 30
			end 

		end 
	end  
end 

function kill_player()
	mp.is_alive = false
	mp.level = 0
	mp.lives -= 1
	local p = particle_new(mp.x,mp.y,mp.vx/3,-3,4)
	p.anim = mp.anim
	p.t = 180
	p.on_update = function(e)
		p.t-=1
		if p.t <= 0 then 
			local l = mp.lives
			load_level(level_info.level,level_info.dx,level_info.dy)
			mp.lives = l
		end 
	end 
end 

function sleep(millisecs)
	for i=1,millisecs/1000*60 do flip() end
end

function kill_enemy(p)
	if p.type != 6 then 
		add_points(p.points,mp.x,mp.y)
	end 
	if p.kill != nil then  
		p:kill()
	end 
	sfx(12)
end 

function hit_kill(p)
	sfx(12)
	if p:fireball_hit() then 
		entity_delete( p)
		add_points(p.points,p.x,p.y)
		local p2 = particle_new(p.x,p.y,p.vx,-2.2,4)
		p2.anim = p.anim
		p2.flip_y = true
	end 
end 

function fireball_vs_enemy_colli(e0,e1)
	if e1.killable then 
		hit_kill(e1)
		entity_delete( e0)
	end 
end 

function enemy_vs_enemy_colli(e0,e1)
	local p = particle_new(e1.x,e1.y,e0.vx/3,-2,4)
	p.anim = e1.anim
	e1.alive = false
	add_points(e1.points,e1.x, e1.y)
	entity_delete( e1)
end 

-- perform collision checking
function entity_collisions()
	for e0 in all(entity_list) do
		if e0:visible() then 
			for k, v in pairs(collision_defs) do
				local condition = true
				if e0.type == k then 
					for e1 in all(entity_list) do
						if e0 != e1 and e1:visible() then 
							for cd in all(v) do
								if e1.type == cd.type then 
									local x0,y0,w0,h0 = get_boundingbox(e0)
									local x1,y1,w1,h1 = get_boundingbox(e1)
									if rect_overlap(x0,y0,w0,h0,x1,y1,w1,h1) then
										cd.handler(e0,e1)
                                        return
									end
								end 
							end 
						end 
					end 
					break
				end 
			end 
		end 
	end
end 

 -- used to define collisions handler between two entity types.
collision_defs = {}
function collisions(src_type, dst_type, f)
	if not collision_defs[src_type] then 
		collision_defs[src_type] = {}
	end 
	add(collision_defs[src_type], { type = dst_type, handler = f })
end 

local ascinumbers = '!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
function getnumber(c)
	for j = 1, #ascinumbers do
		if sub(ascinumbers,j,j) == c then 
			return j-1
		end 
	end 
end 

string_idx = 1
function loadstring(str)
	string_idx = 1
	return str
end 
function hextonumber(src)
    local val = 0
    for i = 1, #src do
        for j = 1, #ascinumbers do
            local c = sub(src,i,i)
            if sub("0123456789ABCDEF",j,j) == c then 
                val*=16
                val+=(j-1)
                break
            end 
        end 
    end 
    return val
end 
function read_number(src, bytes)
    local str = sub(src, string_idx, string_idx+(bytes-1))
    string_idx+=bytes
    return hextonumber(str)
end 
function read_string(src, bytes)
    local str = sub(src, string_idx, string_idx+(bytes-1))
    string_idx+=bytes
    return str
end 

function load_tilemap(str)
	tilemap = {}
	local decompressed = {}
	local i = 1
	local add_to_tilemap = function(id)
		add(decompressed,id)
		if #decompressed == tilemap_width then 
			add(tilemap,decompressed)
			decompressed = {}
		end 
	end 
	while i <= #str do 
		local val =  getnumber(sub(str,i,i))
		if  val+0x21 == 0x7e then 		
			local cnt =  getnumber(sub(str,i+1,i+1))
			local val = getnumber(sub(str,i+2,i+2))
			while cnt > 0 do 
				add_to_tilemap(val)
				cnt -=1
			end  
			i+=3
		else
			add_to_tilemap(val)
			i+=1
		end   
	end  
end 

function load_points(lev)
	local points = {}
	local pcount= read_number(lev,1)
	for pi = 1, pcount do 
		add(points, read_number(lev,3))
		add(points,read_number(lev,3))
	end 
	return points
end 

function load_level(lev,x,y)

	music(-1)
	
	p_list = {}
	entity_list = {}
	mp_list = {}
	hidden_items = {}
	
	loadstring(lev)

	-- level id 
	read_number(lev,1)
	read_number(lev,1)
	read_number(lev,1)

	level_info.music = read_number(lev,1)

	local objcount = read_number(lev,2)

	for i = 1,  objcount do
		
		local id = read_number(lev,1)
		local subid = read_number(lev,1)
		local x = read_number(lev,3)
		local y = read_number(lev,3)+8
		local startdir = read_number(lev,1)

		if id == 2 then 
			-- enemy
			if subid == 1 then 
				--goomba
				new_goomba(x,y,startdir)
			elseif subid == 2 then  
				-- koopa_troopa
				new_koopa_troopa_green(x,y,startdir)
            elseif subid == 4 or subid == 5 then 
				-- paratroopa
				local points = load_points(lev)
				new_koopa_paratroopa_green(x,y, {points[3],points[4],points[5] - points[1],points[2]-points[4]})
			elseif subid == 10 then  
				-- pirana_plant
				new_pirana_plant(x,y)
			elseif subid == 15 then
				 --bowser
				new_browser(x,y)
			end 
		elseif id == 1 then 
			-- item
			local tmp = {x = flr(x/8), y = flr(y/8),type = (subid == 2 and 1 or subid)}
			add(hidden_items, tmp)
		elseif id == 5 then 
			-- moving_platform
			local points = load_points(lev)
			moving_platform_new(x,y,24,4,-0.5,points)
		elseif id == 11 then 
			-- label
			new_label(x,y, read_string(lev,read_number(lev,2) ))
		elseif id == 9 or id==10 then 
			-- vpipe
			-- finish
			local w= read_number(lev,2)
			local h= read_number(lev,2)
			local destx= read_number(lev,2)*8
			local desty= read_number(lev,2)*8
			local length= read_number(lev,2)
			local target = read_string(lev,length )
			local trigger = new_warpzone(x,y,w,h,target,destx,desty, id, startdir)
		elseif id == 12 then 
			new_fire_bar(x,y,startdir)
		end 
	end 
	

	tilemap_backcolor = read_number(lev,1)
    tilemap_width = read_number(lev,3)
    tilemap_height= read_number(lev,3)
    local datalength = read_number(lev,3)

	local data = read_string(lev,datalength )
	load_tilemap(data)

	add(hidden_items, {x = 21, y = 10,type = 6})
	
	if mp == nil then 
		mp = new_player(x,y)
	else
		mp.x = x
		mp.y = y
		mp.is_alive = true
		mp.finish = false
		mp.physics = true
		mp.vx = 0
		entity_add( mp)
	end 
	if mp.timer <= 0 then 
		mp.timer = 300
	end 

	
    cam_x = max(0,mp.x - 64)

	--p_fade_out()
	cls()
	flip()
	sleep(1000)
	--p_fade_in()
	play_music(level_info.music)

end 

function _init()

    title_screen()

	collisions(0, 10, player_vs_vpipe)
	collisions(0, 9, player_vs_vpipe)
	collisions(0, 2, player_vs_enemy_colli)
	collisions(0, 6, player_vs_enemy_colli)
	collisions(0, 1, player_vs_item_colli)
	collisions(4, 2, fireball_vs_enemy_colli)
	collisions(6, 2, enemy_vs_enemy_colli)
	collisions(6, 6, enemy_vs_enemy_colli)
	
    level_up_timer = new_frametimer(0.064)

    load_level(level_info.level,level_info.dx,level_info.dy)
end 

function title_screen()
    while not btn(4) and  not btn(5) do 
        rectfill(0,0,127,127,12)
        rectfill(16,24,104,64,0)
        map(0,0,0,8,16,15)
        color(7)
        cursor(22,80)
        print"press any key to begin"
        flip()
    end 
end 

finish_state = 0
finish_x = 0

function finish_anim()
	if finish_state == 0 then -- falling down until ground and start movement
		if mp.grounded then 
			finish_state = 2
			finish_x = mp.x
			mp.vx=0.5
		else 
			mp.vx = 0
		end 
	elseif finish_state == 2 then 
		if mp.x - finish_x >= 54 then -- stop at castle
			mp.vx = 0
			finish_state = 3
		end  
	elseif finish_state == 3 then  -- add time to points
		mp.timer = max(0,mp.timer-1)
		mp.points+=1
		if mp.timer <= 0 then 
			sleep(500)
			mp.timer = 300
			load_level(level_info.level,level_info.dx,level_info.dy)
		end 
	end 
end 

pause_gameplay = 0

function _update60()

	pause_gameplay-=1
	
    -- level time
	if not mp.finish then
		mp.timer-=const_frame_time
		if mp.timer <= 0 then 
			kill_player()
		end 
	end 
	
	 -- update game objects
	if mp.transform_enabled < 0 and pause_gameplay <= 0 then
		if mp.finish then 
			finish_anim()
		else 
			player_input()
		end 
		entity_update()
		entity_collisions()
	end 
   

   	 -- camera control
	if tilemap_width > 16 then
		local cdx = cam_x - (mp.x - 64)
		if cdx > 10 then 
			cam_x-=(cdx-10)
		elseif cdx < -10 then 
			cam_x-=(cdx+10) 
		end  
		cam_x = min(max(0,cam_x), tilemap_width*8-128)
	end 

end 

function draw()

	rectfill(0,0,127,8,0)
	draw_hud()
	rectfill(0,8,127,127,tilemap_backcolor)
	draw_map()
	entity_render()
	update_particles()

	--camera(0,0)
	--cursor(0,0)
	--color(7)
	--print("")
	--print("")
    --print("x/y: " .. mp.x .. "/" .. mp.y)
	--print("vx/vy: " .. mp.vx .. "/" .. mp.vy)
	
end 

function _draw()
    draw()
end 

function add_points(points,x,y)
	mp.points += points
	local panim = particle_new(x,y,0,-1.2,4)
	panim.t = 120
	panim.points = points
	panim.physics = false
	panim.draw  = function(o)
		print(o.points,o.x-cam_x,o.y,7)
	end 
end

function rect_overlap(x0,y0,w0,h0, x1,y1,w1,h1)
    return not (x0 > x1 + w1 or  x1 > x0 + w0 or y0 > y1 + h1 or y1 > y0 + h0)
end 

function draw_hud()
	spr(96,0,0)
	spr(143,9,0)
	print(mp.lives, 16,2,7)
	spr(219,24,0)
	spr(143,33,0) 
	print(mp.coins, 40,2,7)
	print(mp.points, 64,2,7)
	spr(159,103,0) 
	print(flr(mp.timer), 112,2,7)
end 

function new_frametimer(delay)
	local o = {
		delay = delay,
		timer = 0,
		tick = function(self)
			self.timer+=const_frame_time
			if self.timer >= self.delay then 
				self.timer-=self.delay
				return true
			end 
			return false
		end 
	}
	return o
end 

function new_anim(frames,w,h,delay,st)
	local o = {
		frames = frames,
		w = w,
		h = h,
		timer = nil,
		index = 1,
		step = st,
		update = function(self)
			if self.timer != nil and self.timer:tick() then 			
				if self.step > 0 then 
					self.index+=1
					if self.index > #self.frames then 
						self.index = #self.frames-1
						self.step = -1
					end 
				elseif self.step  < 0 then 
					self.index-=1
					if self.index < 1 then 
						self.index = 2
						self.step = 1
					end 
				else
					self.index = self.index % #self.frames + 1
				end 
			end 
		end,
		draw = function(self,x,y, hflip, vflip)
			local frame = self.frames[self.index]
			spr(frame, x-cam_x,y,self.w,self.h, hflip, vflip)
		end 
	}
	if delay > 0 then 
		o.timer = new_frametimer(delay)
	end 
	return o
end 

p_list = {}
function particle_new(x,y,vx,vy,c)
 	local o = entity_new(x,y,3,3,vx,vy,3)
 	o.physics = true
	o.t = 60
	o.c = c
	o.update = function(e)
		move_entity(e)
		if o.physics then 
			e.vy+=(physics_gravity*const_frame_time)
		end 
		e.on_update(e)
        e.t-=1
		return e.t >= 0
	end 
	add(p_list,o)
	return o
end 
function move_entity(e)
    e.x+=e.vx
	e.y+=e.vy
end 
function update_particles()
	foreach(p_list, function(p)
		if not 	p:update() then 
			del(p_list, p)
		else
			p:draw()
		end 
	end)
end 
function new_destroy_effect(x,y,c)
	particle_new(x+4,y+4,1,-1.5,c)
	particle_new(x+4,y-4,1,-2.5,c)
	particle_new(x-4,y+4,-1,-1.5,c)
	particle_new(x-4,y-4,-1,-2.5,c)
end

function new_coin_effect(x,y,vy, start, cnt)
	local p = particle_new(x,y,0,0xfffe,4)
	p.anim = new_anim(array"219,220,221,222,223", 1,1,0.032,1)
	p.t = 30
	return p
end 

function new_block_bounce(x,y, new_item, bounce_img, finish_img)
 	_mset(x,y, 1)
	local p = particle_new(x*8,y*8,0,-1.2,4)
	p.starty = y*8
	p.w = 8
	p.h = 8
	p.mx = x
	p.my = y
	p.img = bounce_img
	p.new_item = new_item
	p.on_update = function(o)
		if o.y > o.starty then 
			o.t = 0xffff
			_mset(o.mx,o.my,finish_img)
			if o.new_item != nil then
				add_item(o.new_item.type,o.mx*8, o.my*8);
			end 
		end 
	end 
end 

entity_list = {}
function entity_new(x,y,w,h,vx,vy,type)
	local e	= {
		anim = nil,
		anim_enabled = true,
		pw = 0,
		ph = 0,
		type = type,
		x= x, 
		y= y,
		vx=vx,
		vy=vy ,
		w = w,
		h = h,
		c = 4,
		flip_y = false,
		flip_x = false,	
		is_alive = true,
		physics = false,
		grounded = true,
		airtime = 0,
		points = 0,
		color = 4,
		grav = physics_gravity,
		-- callbacks

		on_hcolli = function(self,pmx,pmy);end,
		on_vcolli = function(self,pmx,pmy);end,
		on_bitcheck = function(self,pmx,pmy,bits);end,
		on_update = function(self);end,

		-- methods 

		set_size = function(e,x,y)
			e.w = x
			e.h = y
		end,

		set_padding = function(e,x,y)
			e.pw = x
			e.ph = y
		end ,
		
		draw_image = function(o)
			o.flip_x =  o.vx > 0
			local px = o.x
			local py = o.y
			local w = o.w
			local h = o.h
			if o.anim_enabled and o.anim != nil then 
				o.anim:update()
				o.anim:draw(px, py, o.flip_x, o.flip_y)
			elseif o.img != nil then 
				spr(o.img, px-cam_x,py, 1,1,o.flip_x, o.flip_y)
			else
				rectfill(px-cam_x,py, px+w-cam_x, py+h,o.c)
			end 
		end ,

		draw = function(o)
			o:draw_image()
			--rect(o.x-cam_x+o.pw,o.y+o.ph, o.x+o.w-cam_x-o.pw-1, o.y+o.h-o.ph,7)
		end, 
        
		update_physics = function(e)
			if e.physics then
				obj_physics(e, e.on_vcolli, e.on_hcolli, e.on_bitcheck)
			end
			if e.grounded then 
				e.airtime = 0
			else
				e.airtime+=1
			end 
		end, 
		update = function(e)
			e:update_physics()
			return e.is_alive 
		end ,
		kill = function(e)
			entity_delete( e)
		end,
		visible = function(e)
			return ( e.x + e.w - cam_x > -32 and e.x - cam_x <  160)
		end,
	}
	return e
end 

function entity_update()
	handle_vertical_platforms()

	foreach(entity_list, function(e0)
		if not e0:update() or e0.y > 128 then 
			entity_delete(e0)
		end 
	end)
	

	if mp.standing_on != nil then 

		local vx = mp.vx
		local vy = mp.vy

		mp.vx=mp.standing_on.vx
		mp.vy=mp.standing_on.vy

		mp:update_physics()
        
		mp.vx = vx
		mp.vy = vy 
		mp.grounded = true
	end 
end 

function entity_render()
	foreach(entity_list, function(e0)
        if e0:visible() then 
		    e0:draw()
        end 
	end)
end

function entity_delete(e)
	del(entity_list,e)
end 

function entity_add(e)
	add(entity_list,e)
end 

function new_follow_path_script(points)
	local fp={
		pts=points,i=1,init=true,
		update=function(e,o)
			local dx=e.pts[e.i]-o.x
			local dy=e.pts[e.i+1]-o.y
			local d=dx*dx+dy*dy
			if e.init then 
				e.init=false
				local l=sqrt(d)
				o.vx=(dx/l)/2
				o.vy=(dy/l)/2
			end 
			if d < 1 then 
				e.i+=2
				e.i=e.i > #e.pts and 1 or e.i
				e.init=true
			else
                move_entity(o)
			end  
		end}
	return fp
end 
-- todo: use physics + h/v_colli here and reduce tokens!!
function new_move_rect_script(points)
    local fp={
        x = points[1], y = points[2], w = points[3], h = points[4],
		pts=points,ix=-0.5,iy=-0.5,
		update=function(e,o)
            o.vx = e.ix
            o.vy = e.iy
            move_entity(o)
			local flip_x = false
			local flip_y = false
			if o.y < e.y then 
				o.y = e.y
				flip_y = e.h > 12
			elseif  o.y+o.h >= e.y+e.h then 
				o.y = e.y+e.h-o.h
				flip_y = e.h > 12
            end 
			if o.x < e.x then 
				o.x = e.x
				flip_x = e.w > 12
			elseif o.x+o.w >= e.x+e.w then 
				o.x = e.x + e.w - o.w
                flip_x = e.w > 12
            end 
			if flip_x then 
				e.ix*=-1
			end 
			if flip_y then 
				e.iy*=-1
			end 
            e.vdir =  e.ix < 0 and -1 or 1
		end}
	return fp
end 

function handle_vertical_platforms()
	local was_ok=mp.standing_on != nil
	local ok=false
	mp.standing_on=nil 
	if mp.y+mp.h > 8 and (mp.vy>0 or mp.grounded == true) then 
		foreach(mp_list, function(e)
			if rect_overlap(mp.x,mp.y+mp.h+mp.vy,mp.w,1,e.x,e.y,e.w,2) then 
				ok=true
				mp.standing_on=e
				mp.grounded=true
				mp.y=e.y-mp.h
				mp.vy=0
				return 
			end 
		end)
	end 
	if mp.vy == 0 and was_ok and not ok then 
		mp.vy=0.001
	end 
end 

mp_list = {}
function moving_platform_new(x,y,w,h,vy, points)
	local p = entity_new(x,y,w,h,0,vy,5)
	p.physics=false
    local dx = points[1] - points[3]
    local dy = points[2] - points[4]
    local dist = dx*dx+dy*dy
	if dist < 256 then 
		p.follow_path = nil
	else
		p.follow_path = new_follow_path_script(points)
	end 
	p.img=253
	p.draw_image = function(o)
        for i = 0, 2 do
            spr(253,o.x+i*8-cam_x,o.y)
        end 
	end 
	p.update = function(e)
		if p.follow_path != nil then 
			e.follow_path:update(e)
		else
			e.y-=0.5
			if e.y< 0 then 
				e.y = 128
			end 
		end 
		return true
	end 
	entity_add(p)
	add(mp_list,p)
	return p
end 

function new_warpzone(x,y,w,h,target, dx,dy, type, dir)
	local p = entity_new(x,y,w,h,0,0,type)
	p.target = target
	p.dx = dx
	p.dy = dy
	p.draw_image = function(o)
	end 
	p.horizontal = dir > 0
	entity_add(p)
	return p
end 

function new_label(x,y ,text)
	local p = entity_new(x,y,#text*8,8,0,0,11)
	p.text = text
	p.draw_image = function(o)
		cursor(o.x-cam_x,o.y)
		color(7)
		print(text)
	end  
	entity_add(p)
	return p
end 

function item_new(x,y,img,t)
 	local o=entity_new(x,y,8,8,0,0.01,1)
	o:set_padding(1,1)
	o.type=1
 	o.img=img
	o.sx=x
	o.sy=y
	o.item_type=t
	o.t=600
	o.base_update=function(e)
		e:update_physics()
		e.t-=1
		if e.t < 0 then 
			return false
		end
		return true
	end 
	entity_add(o)
	return o
end 

function new_mushroom(x,y)
	local i =	item_new(x,y, 205,1)
	i.vdir = 0.5
	i.moveup = 0
	i.draw = function(self)
		self:draw_image()
		spr(4,self.sx-cam_x,self.sy)
	end 
	i.on_hcolli = function(self,pmx,pmy)
	 	self.vdir*=-1
	end 
	i.update = function(self)
		self:item_dt()
		return self:base_update()
	end 
	i.item_dt = function(self)
        self.moveup+=0.5
		if self.moveup < 8 then 
			self.y-=0.5
		else
			self.physics = self.moveup > 14
		end
		self.vx = self.vdir 
	end 
	return i
end 

function new_life(x,y)
	local i = new_mushroom(x,y)
	i.img = 206
	i.item_type = 4
	return i
end 

function new_star(x,y)
	local i = new_mushroom(x,y)
	i.x = x-4
	i.w = 16
	i.anim = new_anim({235},2,1, 0.25,0)
	i.item_type = 3
	i.update = function(self)
		self:item_dt()
		if self.moveup == 14 then 
			self.vy = -3.5
		end 
		return self:base_update()
	end 
	return i
end 

function new_beanstalk(x,y)
	local o = item_new(x,y,4,6)
	o.update=function(e)
		o.t-=100
		if o.t <= 0 then 
			o.t=600
			o.sy-=8
			if o.sy >= 0 then 
				_mset(o.sx/8,o.sy/8,26)
			end 
		end 
		return o.sy >= 0
	end 
	entity_add(o)
	return o
end 


function new_flower(x,y)
    flower_color_anim = new_color_anim(0.047,{array"2,8,14",array"8,14,10",array"14,10,9",array"10,9,2",array"9,2,8"})
	local i = item_new(x,y,207, 2)
	i.draw = function(self)
		flower_color_anim:apply()
		self:draw_image()
		pal()
		spr(4,self.sx-cam_x,self.sy)
	end 
	i.update = function(self)
		self.y = max(self.sy - 8, self.y - 0.5)
		return self:base_update()
	end
	return i 
end 

function enemy_new(x,y,type)
 	local o = entity_new(x,y,8,8,0,0.01,2)
	o:set_padding(1,1)
	o.on_hcolli = nil
	o.t = 600
	o.vdir = -0.2
	o.is_alive = true
	o.enemy_type = type
	o.killable = true
	o.physics = true
	o.kill = nil
	o.killcount = 0
	o.jumpable = true
	o.fireball_hit = function(e)
		return true
	end 
	o.hit = function(e,dir)
	end 
	o.on_hcolli = function(self,pmx,pmy)
	 	self.vdir*=-1
		self.vx = self.vdir 
	end 
	o.update = function(e)
		if e:visible() then
			e:on_update()
			e:update_physics()
			if e.grounded then
				e.vx = e.vdir
			end 
			if e.is_alive == false then 
				e.killcount-=1
				if e.killcount == 0 then 
					e.t = 0xffff
				end 
			end 
		end 
		return e.t > 0
	end 
	entity_add(o)
	return o
end 

function new_fire_bar_elem()
	local e = enemy_new(4096,0,999)
	e.physics = false
	e:set_padding(2,2)
	e.killable = false
	e.color_anim = new_color_anim(0.1,{array"10,9,8",array"8,10,9",array"9,8,10"})
	e.draw = function(e)
		e.color_anim:apply()
		spr(187,e.x-cam_x,e.y)
		pal()
	end 
	return e
end 

function new_fire_bar(x,y,startdir)
	local e = enemy_new(x,y,16)
	e.angle = startdir*22.5
	e.physics = false
	e.kill = function(e)end 
	e.children = {}
	for i = 0, 5 do 
		add(e.children,new_fire_bar_elem())
	end 
	e.draw = function(e)
		spr(4,e.x-cam_x,e.y)
	end 
	e.update = function(e)
		local i = 0
		local index = 1
		local a = e.angle / 360.0
		local sin_a = sin(a)
		local cos_a = cos(a)
		while i <= 25 do 
			e.children[index].x = e.x + sin_a * i
			e.children[index].y = e.y - cos_a * i
			i+=5
			index+=1
		end 
		e.angle = (e.angle + 361) % 360
		return true
	end 
	return e
end 

function new_koopa_troopa_green(x,y, startdir)
	-- 0: paratrooper
	-- 1: walking trooper
	-- 2: motionless turtle shell
	-- 3: moving turtle shell

	local e = enemy_new(x,y,2)
	e.anim = new_anim(array"103,104",1,2, 0.25,0)
	e.para_anim = new_anim(array"239,255",1,1, 0.25,0)
	e:set_size(8,16)
	e.status = 1
	e.points = 200
	e.follow_path = nil
	e.vx = startdir == 0 and -0.2 or 0.2
	
	e.hit = function(e,dir)
		-- if state is 'motionless turtle shell'
		if e.status == 2 then 
			e.vx = 2*(dir < 0 and physics_max_x_vel_run or -physics_max_x_vel_run)
			e.status = 3
			e.type = 6
			e:set_padding(0,0)
			e.x+=e.vx*2
		end 
	end 
	e.update = function(e)
		if e:visible() then
			if e.status == 0 then -- paratroopa
				e.para_anim:update()
				e.follow_path:update(e)
			else 
				--  waling koopa troopa
				if e.status == 1 then 
					
					local idx = flr(( e.x + 4)/8)
					local idy = flr(( e.y + 17)/8)
					if not fget(_mget(idx-1, idy),0) and not fget(_mget(idx+1, idy),0) then 
						-- move down if on single block
					else
						-- turn around, if ground ends
						if not fget( _mget(idx, idy),0) then 
							e:on_hcolli(0,0)
						end 
					end 
				end 

				-- turn around if stopped by physics
                local lastVX = e.vx
				e:update_physics()
                if e.status != 2 and e.vx == 0 then
                    e.vx=-lastVX
                end 

				--slow down if too fast
                if abs(e.vx)-physics_max_x_vel_run > 0.1 then 
                    e.vx*=0.975
                end 

			end 
		end 
		return e.is_alive
	end 
	e.draw = function(o)
        o:draw_image()
        if e.status == 0 then -- paratroopa
            e.para_anim:draw(e.x+(e.vx > 0 and -3 or 3), e.y+4, e.vx > 0, false)
        end 
	end
	e.kill = function(e)
			-- if paratroopa, set state to koopa troopa
			if e.status == 0 then 
				e.status = 1
				e.physics = true
			-- if 'koopa troopa' or 'moving shell' then 
			-- set state to 'motionless turtle shell'
			elseif e.status == 1 or e.status == 3 then 
				e:set_padding(1,1)
				e.status = 2
				e.anim_enabled = false
				e.vx = 0
				e.vdir = 0
				e.h = 8
				e.img = 152
				e.type = 2
				e.x = flr(e.x)
			-- if 'motionless turtle shell', then 
			-- set state to 'moving turtle shell'
			elseif e.status == 2 then 
				e.vx= 2*(mp.x < e.x and physics_max_x_vel_run or -physics_max_x_vel_run)
				e.status = 3
				e.type = 6
			end 
		end 
	return e
end 

function new_koopa_paratroopa_green(x,y, points)
	local e = new_koopa_troopa_green(x,y)
	e.enemy_type = 4
	e.follow_path = new_move_rect_script(points)
	e.status = 0
	e.physics = false
	return e
end 

function new_goomba(x,y, startdir)
	local e = enemy_new(x,y,1)
	e.points = 100
	e.anim = new_anim(array"182,183",1,1, 0.25,0)
    e.vdir = startdir == 0 and -0.2 or 0.2
	e.kill = function(e)
			e.is_alive = false
            e.anim_enabled = false
			e.physics = false
			e.img = 184
			e.x = flr(e.x)
			e.killcount = 120
		end 
	return e
end 

function new_pirana_plant(x,y)
    local e = enemy_new(x,y+16,10)
	e:set_padding(5,2)
	e:set_size(16,16)
	e.sy = y
	e.points = 100
	e.anim = new_anim(array"105,107",2,2, 0.25,0)
	e.delay = 0
	e.time = 60+rnd(120)
	e.jumpable = false
	e.kill = function(e)
		e.is_alive = false
	end 
	e.draw = function(e)
		clip(e.x-cam_x,e.sy,16,16)
		e:draw_image()
		clip(0,0,128,128)
	end 
	e.update = function(e)
		e.physics = false
		e.delay+=1
		if e.delay>e.time*2+64 then
			e.delay = 0
		elseif e.delay>e.time*2+32 then
			e.y+=0.5
		elseif e.delay>e.time+32 then
			--wait
		elseif e.delay>e.time then
			e.y-=0.5
		else
			--wait
		end 
		return e.is_alive
	end 
	return e
end 


function new_browser(x,y)
    local e = enemy_new(x,y,15)
	e:set_padding(2,2)
	e.points = 5000
	e:set_size(16,24)
	e.anim = new_anim(array"137,139,141",2,3, 0.25,0)
	e.delay = 0
	e.vdir = -0.7
	e.time = 60+rnd(120)
	e.minx = x-72
	e.maxx = x 
	e.jumpable = false
	e.startdelay = 0
	e.energy = 10
	e.kill = function(e)
		e.is_alive = false
		stop()
	end 
	e.fireball_hit = function(e)
		e.energy-=1
		return e.energy<0
	end 
	e.draw = function(o)
		o.anim:draw(o.x, e.y,false,false)
		--rect(o.x-cam_x+o.pw,o.y+o.ph, o.x+o.w-cam_x-o.pw-1, o.y+o.h-o.ph,7)
        --cursor(0,16)
        --color(7)
        --print("delay: " .. e.delay .. " vx: " .. e.vx)
	end 
	e.update = function(e)
		e.startdelay+=1
		if abs(e.x - mp.x) < 256 then 
			e.anim:update()
			e:update_physics()
			e.delay+=1
			if (e.vx < 0 and e.x <= e.minx) or (e.vx > 0 and e.x >= e.maxx) then 
				-- stop move
				e.vx = 0
				e.delay = 0
			elseif e.vx != 0 then 
				-- shoot
				if e.delay > e.time then
					new_podoboo(e.x,e.y+8, -1)
					e:update_time()
				end 
				-- jump
				if e.grounded and e.delay % 30 == 0 then 
					e.vy = rnd(2)-3
				end 
			else
				-- wait
				if e.delay > 90 then 
					e.vdir*=-1
					e.vx = e.vdir
					e:update_time()
				end 
			end 
		end 
		return e.is_alive
	end 
	e.update_time = function(o)
		e.time = 40+flr(rnd(30))
		e.delay = 0
	end 
	return e
end 

function new_podoboo(x,y, dir)
	local e = enemy_new(x,y,14)
	e.color_anim = new_color_anim(0.1,{array"10,9,8",array"8,10,9",array"9,8,10"})
	e.img = 237
	e.vdir = dir
	e.physics = false
	e.killable = false
	e.update = function(e)
		e.x+=e.vdir
		return true
	end 
	e.draw = function(o)
		o.color_anim:apply()
		o:draw_image()
		pal()
	end 
	return e
end 

function new_color_anim(delay,data)
	local e = {
		timer = new_frametimer(delay),
		index = 1,
		source =  data[1],
		data = data,
		apply = function(o)
			local p = o.data[o.index]
			for i = 1, #o.source do
				pal(o.source[i],p[i])
			end 
			if o.timer:tick() then 
				o.index = o.index % #o.data + 1
			end 
		end,
		reset = function(e)
			pal()
		end 
	}
	return e
end 

function fireball_new(x,y,vx)
	local o = entity_new(x,y,4,4,vx,1,4)
	o.anim = new_anim(array"187,188,203,204",1,1, 0.05,0)
	o.color_anim = new_color_anim(0.1,{array"10,9,8",array"8,10,9",array"9,8,10"})
	o.physics=true
	o.is_alive=true
	o.lastvy=1
	o.by=y
	o.draw=function(self)
        self.color_anim:apply()
        self:draw_image()
        pal()
	end 
	o.update=function(self)
		self.vy=self.lastvy
		self:update_physics()
		self.lastvy = self.y < self.by and -self.lastvy or self.lastvy
		return self.is_alive and self:visible()
	end 
	o.on_hcolli=function(self,pmx,pmy)
		self.is_alive=false
	end 
	o.on_vcolli=function(self,pmx,pmy)
		self.lastvy=-self.lastvy
		self.by=self.y-8
		self.y+=self.lastvy*2
	end 
	entity_add(o)
	return o
end 


function obj_physics(obj,v_colli, h_colli, on_bitcheck)
	local pmx=0
	local pmy=0
	-- vertical
	if obj.vy != 0 then
		local offset = obj.vy > 0 and obj.h or 0
		if v_pick(obj.x,obj.y+offset,obj.w,obj.h,obj.vy,
			function(mx,my,bits)
				pmx = mx
				pmy = my
				on_bitcheck(obj,pmx,pmy, bits);
				if obj.vy > 0 then
					return band(bits,1) == 1 
				else
					return band(bits,2) == 2 
				end   
			end,true) then 

			local off=-1
			if obj.vy>0 then 
				obj.grounded=true 
				off=obj.h/8
			end 

			v_colli(obj,pmx,pmy-off)

			obj.vy=0.01
			obj.y=(pmy-off)*8
			
		else 
			obj.grounded=false 
			obj.y+=obj.vy
			obj.vy+=obj.grav*const_frame_time
			if obj.vy > 2.15625 then 
				obj.vy=2.00
			end
		end
	end
	-- horizontal
	if obj.vx != 0 then
		local offset = obj.vx > 0 and obj.w or 0
		if h_pick(obj.x+offset,	obj.y,obj.w,obj.h,obj.vx,
			function(mx,my,bits)
				pmx = mx
				pmy = my
				on_bitcheck(obj,pmx,pmy,bits);
				return band(bits,4) == 4  
			end,true) then 
		
			local off= obj.vx<0 and obj.w/8 or -obj.w/8
			obj.vx=0
			obj.x=(pmx+off)*8
			h_colli(obj,pmx+off,pmy)

		else 
			 obj.x+=obj.vx
		end
	
	end 
	
end 

function h_pick(x,y,w,h,vx,f,_break)
	local cnt=h/3 
	for i=h-1, 3, -3 do
		local mx=flr((x+vx)/8)
		local my=flr((y+i+0.999)/ 8)
		local bit=fget(_mget(mx,my))
		if bit != 0 then
			if f != nil then
			 	local result=f(mx,my, bit)
				if _break and result then 
					return true
				end
			end 
		end
	end
	return false 
end 

function v_pick(x,y,w,h,vy,f,_break)
	local pd = vy < 0 and 3 or 1
	local cnt=(w/8)-1
	local ii={}
	add(ii,pd)
	for i=1, cnt do
		add(ii,i*8-1)
	end
	add(ii,w-pd)
	for i in all(ii) do
		local mx=flr((x+i)/8)
		local my=flr((y+vy)/8)
		local bit=fget(_mget(mx,my))
		if bit != 0 then
			if f != nil then
			 local result = f(mx,my, bit)
				if _break and result then 
					return true
				end
			end 
		end
	end
	return false 
end 

function draw_map()
	local startx = max(1,flr(cam_x /8))
	local endx = min(tilemap_width,startx+17)
	for iy = 1, 15 do 
		for ix = startx, endx do
			local i = tilemap[iy][ix]
			if i > 0 then 
				local p = i >= 80
				palt(13,p)
				palt(0,not p)
				spr(i, ix*8-cam_x-8, iy*8)
			end 
		end 
	end 
end 

function _mget(x,y)
	x = flr(x+1)
	y = flr(y)
	if y >= 1 and y < 16 and x >= 1 and x <= tilemap_width then
		return tilemap[y][x]
	end 
	return 0
end 
function _mset(x,y,value)
	x = flr(x+1)
	y = flr(y)
	if y >= 1 and y < 16 and x >= 1 and x <= tilemap_width then
		tilemap[y][x] = value
	end 
end 
__gfx__
0000000000000000999989987dddddd45dddddd4d777777d4499944444444444000000000000000000ffffffff79000000000000000000000000000000015000
000000000000000098882882d0055005d99999417d6666d549a9aa99a9aa99440000000000000000000fff8f8f79000000333000088888880888888800015000
000000000000000098882882d05aa505d984485176dddd5549a9aa99a9aa994400000000000000000000fff8ff790000037bb300080000000800000000155500
000000000000000098882882d05aa505d948845176dddd5549a9aa99a9aa9944000000000000000000000f8f8f79000037bbbb30080000000800000000151500
000000000000000092118998d0a55a05d948845176dddd5549a9aa99a9aa99440000000000000000000000ffff7900003bbbbb30000000888808000000151500
000000000000000099989882d0055005d984485176dddd5549a9aa99a9aa9944000000ddd00000000000000fff7900003bbbbb30888888888888888800151500
000000000000000098829882d0088005d95555d17d5555d5444444444444444400000dbbbd00000000000000ff79000003bbb300000000000000000000155500
0000000000000000811281124555555151111114d555555d04444444aa4994400000dbbbbbd00000000000000f79000000333000088880888888808800005000
00000000000000000000000000000000bbbbbbbbbbbbbbbb044a9aa4aa449440000dbbbbbbbd0000000b30000079000000000000111119dddddd191188000000
d6dddd00777607770776077707777776d111b11bb6ddddd1044a9aa4aa4494400055555555555000330b300000790000088888881111d9ddddddd91188888888
dd888800666507660765076507666665d111b11bbd111111044a9aa4aa4494400577777777777500393b30000079000008000000999999999999999900000000
dd888800666507660655075507666665d111b11bb1111111044a9aa4aa4494405777777777777750039b30000079000008000088119ddddddd9ddddd88080000
dd888800666507660000000007666665dbbb1dd1bbbbbbbb044a9aa4aa4494405777777777777750000b30000079000000000088119ddddddd9ddddd88080000
dd888800666507667607760707666665ddd1d11bddd1b6dd044a9aa4aa4494405777777777777550000b303300790000888088881d9ddddddd9ddddd98088888
dd000050666507666507650707666665d11bd11b1111bd11044a9aa4aa4494400557788888775500000b33930079000000008000999999999b99999900000000
d00000055555065555065506065555551bbb1bbb1111b111044a9aa4aa4494400005555555550000000b393000790000000080881dddd9ddbbbdd9dd98888000
00dddddddddddddddddddd007ffffff40000000000000000444444444444444460000006000566500800080005666500000000881dddd9db333bd9ddd8888000
0d88d888d888d888d888d8d0f7ffff4105555552551056dd4999944244444444060000050566000089808980561f1650088888881dddd9db3c3bd9ddd8888888
d8888888888888888888888dff44441105222221555065559aaaaa49aaaaaaaa00655656565000009a989a986f8f8f600800000099999999b3b9999900000000
d8888d888d888d888d888d8dff444411011111115510d5559aaaaa44777777770050006006000000878987896fffff6008000088119dddd55555dddd88080000
ddd8ddd5ddd8ddd5ddd8ddd5ff44441100000000000000009aaaaa49aaaaaaaa0060556065000000888888886111116000000088119ddddd552ddddd88080000
d5ddd5ddd5ddd5ddd5ddd5ddff44441155550552056dd551944449494444444400506056500000008888888861a1a16088808888119ddddd552dddd188888888
505d505d545d545d545d505df411119152220221065555559444494a999999990065566500000000888888885f969f5000008000999999995529999900008000
0005000549454a450005000541111119211101110d55555199999949444444440560065000000000888888880565650000008000111119dd552d191188008000
0000000099999999222222228888888899999999066606669444494944444444560065000a999990888888880940094000007000088880885528808899999888
088888889bbbbbbb244444458ddddddd889888980666066699999942aaaaaaaa000650000997a79988888888594559450007c700088880885528808888999999
080000009bbbbbbb244444458ddddddd999999990555055599999942aaaaaaaa00060000097a0a798888888844444444007cc700080000000500000088888899
080000009bbbbbbb255555558ddddddd9888988885558555999999499999999900650000097a0a79888888880940094007ccc700080000888808000099999999
000000009999999922222222888888889999999985558555999999499999999900600000097a0a7988888888594559457cc7cc77000000000000000099998888
88808888bbbb9bbb44524444dddd8ddd8898889805550555944444424444444465000000097a0a798888888844444444cc7c7ccc888088888880888888899998
00008000bbbb9bbb44524444dddd8ddd99999999044404449999994999999999600000000997a7998888888809400940c7cc77cc000080000000800099999999
00008000bbbb9bbb55525555dddd8ddd98889888044404444444444444444444500000000099999a8888888809400940cccccccc000080000000800088888888
00000000000000000000000000000000000000000000000000000080080800800080800866066066660000665499888844448888999988944988889470000007
05555555110111011011101155055505505550555dddddd000080898890008988090008060000000644444465499888844448888999988944988889476000006
0555555500000000000000000000000000000000d000000000008998998889989898808800000006644444465499888844448888999988944988889470600067
0555555501110111111011100555055555505550d000000080009999999a97999999880060000006660000665499888844448888999988944988889470600067
000000000000000000000000000000000000000000000000008997999a99a7a99aa9988060000000000000004988444488884444888899455499994570066607
5555055511011101101110115505550550555055ddd05ddd00897aaa9aa9aa9aaa99a98000000006000000004988444488884444888899455499994570000007
55550555000000000000000000000000000000000000d0008899aaa7aaa7a9a9a7aaaa9860000006000000004988444488884444888899455499994570000007
55550555011101111110111005550555555055500000d00089977a77a77a77797777aaa860660660000000004988444488884444888899455499994570000007
00ccc00000499000c07999940000c00000cc0000000000000994110c0f4444420f9444420f444442099442000074444477777777777777777777777777777777
40ccc0f4402490f4c09fff990790c0f940cc0910000000000942210c04999921090000040499999409422100009fff4477777777777777777777777777777777
40ccc09940224099c0fff99409f0c09f40cc0410000000000422110c0499921109000002049999420422110000fff44477777777777777777777777777777777
40ccc09a4022209a000000000ff0c0fa40cc04100000000000000000000000000000000000000000000000000000000077777777777777777777777777777777
4000009940000099079907990ff000ff40000410000000009944211094420f994200000444420944994420000799079977777777777777777777777777777777
944044999440449909f909ff0ffffff99440941000000000942211102211099494000009999904999422100009f909ff77777777777777777777777777777777
99409999994099990ff90ff909999999994044100000000042211110211104424200000999920999422110000ff90ff977777777777777777777777777777777
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077777777777777777777777777777777
00ccc70000ccc70000ccc70000ccc70000cc7c0000000bbb00000000000000000000000000000030030000000003000000003000000000000000000000cccc00
0ccccccc0ccccccc0ccccccc0ccccccc0ccccccc00ccc7bb0000000000000000000000000000038888300000003880000008830000000000000000000cccccc0
0ccb0bb00cbb0bb00ccb0b000ccb0b000ccb5b500ccccccc000000000000000000000000000038800883000000380000000083000000000000000000cccccccc
0bbb8bbb0bbb8bbb0bbb8bbb0bbb8bbb0bbb8b8b0ccb5bb2000000000700000007000000000038888883000000388800008883000000555000005550bccccccb
0bbbbbb00bbbbbb00bbbbbb00bbbbbb00bbbbbb00bbb8bbb00ccc700057f0000057f00000003b380083b300003b3800000083b300005557000055578bcccccb0
00bbbb0000bbbb0000bbbb0000bbbb0000bbbb000bbbbbbc0ccccccc087ff000087ff0000003b380083b300003b3800000083b300005581800055818bbbbbbb0
00bbb000005bb00000ccb000000bb00000cbbcc000bbbbcc0ccb5b00f7fff000f7fff0000003b380083b300003b3888008883b3000b8588800335888ccbbbbbb
05ccdd00555dcd570dccdd0000dcd000ccc77ccc00dbbdc00bbbbbbbffffff00ffffff000003b388883b3000003b38000083b30003b8448403334484ccdccdcb
5ccc77d05ccdcdc70dccddc00dcccd70c6677ccc0ccddcd00bbbbbb0fefffff0fefffff00003b380083b3000003b38000083b300333bc2003338c200ccd11dcc
5ccc77d05cdecec00dcc77c00dcccc77066dccc00cccede00bbbbb000ffffff00ffffff000003b3883b300000003b388883b30003338c50033388c000cdddddc
0dcccdd077dd6d000ddc77000dddcc7700ddddd0777dddd000ccdd0000fffff000fffff000000333333000000000033333300000333cc500333688c00dddd110
0ddddd1007ddddd001dddd0000ddddd05dddddd077ddddd00ccc77d00000fff00000fff00000a034430a00000000a034430a0000333c5200333652000d11d1d0
00ddd100001dddd5011dddd055dddd1055d1dd00001dddd50dcccdd00000fff00000fff000009a0440a9000000009a0440a9000003cc2000036620000dd1ddd0
00dd100001110dd50011dddd55dd0110551110005511dd550ddddd100000fff00000fff0000049a44a940000000049a44a940000088440000884400000dd0d15
00555000511000500055155d500005500015500055100d5500ddd1000000f0ff00fff0f000000494494000000000049449400000088444000884440000110150
00555500550000000055555500000555005500005000000000555500000ff00f000f0ff000000044440000000000004444000000080000000800000005550000
000000000000000000ccc70000ccc700000000000000000006027600060276000066600000000000000000000000000000000000000000000000000000000000
00ccc70000ccc70000ccccc000ccccc000ccc7000ccc700007687827076878270672260000000000000000000000000000000000000000000000000000000000
00ccccc000ccccc000bb5b0000bb5b0000ccccc00ccccc0002788876027888766788826000000000000000000000004444444400000000444444440000000000
00bb5b0000bb5b0000bbbbb000bbbbb000bb5b000bb5b0000222788202227882628e826000000004444440000000044444444400000004444444440007070000
00bbbbb000bbbbb00cedec000cedec0000bbbbb00bbbbb000992768209927682628e8260000000444444440000000ffffffff40000000ffffffff40000700000
0cedec0000edec0000dddd000dddd0000cedec00cede00007792862977928629628887600000044fffff444000000ffff7fff44000000ffff7fff44007070000
00ddd0000cdddd000d00000000000d000dddd0000dddc000179929991749299406227600000004ff7ffff440000ffffff0ffff40000ffffff0ffff4000000000
00d0d00000d00000000000000000000000000d00d00d0000055000550004044000666000000000ff0ffff440000f99999fffff40000f99999fffff4000000000
0000004444400000000000000000000000000000000000000000000000000000000000000000fffffffff440000004449fffff40000004449fffff4000000000
0000011911900000000000000000000000000000000000000000000000000000000000000000f99ffffff00000009999ffffff0000009999ffffff0000777000
00001a777a140000000000000000000000000000000000000000000000000000001111000000049ffffff00000000fffffffff0000000fffffffff0007070700
00001717171300000000bb0000000bb000004004400000000000000440000000016ff6100000099ffffff00000000fffffffff0000000fffffffff0070070070
00001717171a30000000bb0440444bb0000974049400000000044004940000001f7ee7f1000000fffffff0000000000ffffff7000000000ffffff70070077770
000001141114b000000004bb303bb4000009748e878700000047748e878700001f0ee0f10fff77c7c7c7c70000000007c7c7c70000000007c7c7c70070000070
000049943499400000000043666340000009974877777000009977487777700016effe6100ff77c7c7c7c7000fff77c7c7c7c7000fff77c7c7c7c70007000700
000004466644000000000566fff665000009994871717000000997787171700004400440000077c7c7c7c70000ff77c7c7c7c70000ff77c7c7c7c70000777000
0000566fff66500000005663ff3ff600008899e887840000008899988784000000022200000007c7c7c7c700000077c7c7c7c700000077c7c7c7c70000cccc00
0005661ff1ff6000000056fbffbff65000898eee8849000000898eee8849000000255520000007c7c7c7c700000000c7c7c7c700000000c7c7c7c7000cccccc0
00056f8ff8ff6500000056fffffff650000898ee84990000000898ee8499000002556652000007c7c7c7c700000000c7c7c7c700000000c7c7c7c70002cccc2b
00056fffffff6500000056f1111f66500000008778440000000000877844000002225652000007c7c7c7c700000000c7c7c7c700000000c7c7c7c700bb2222bb
00056f1111f665000000051a11a16500000000088000000000000008800000000499255200000ddd00ddd00000000004457333000000000445733300bcd44dc0
000051a11a1650000000056af6af6500000000000000000000000000000000004949252000000333003330000000000333555000000000033355500000dddd50
000056af6af65000000000555d555000000000000000000000000000000000004149224000003333033330000000003333033330000000333303333005511500
00000555d55500000000000000000000000000000000000000000000000000000449944400003333033330000000033333000333000003333300033305000000
6fffffffffffffffffffffffffffffffffffffffffffffff005555000055550000000000fffffffffffffffd0000000000000000000222007777777777777777
fbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb088558800880088000000000bbbbbbbbbbbbbbb50000b00000000000002555207777777777777777
fbfbbbbffbbbbff0bff0bbbbfffff0bffbbbff0bbbbbbbbbf708807ff708807f00000000bbbbbbbbbbbbbfb5000bb00000bbb000025566527777777777777777
fbbbbbffffbbbff0bff0bbbbfffff0bffbbbff0bbbbbbbbbf775577ff770077f00000000bbbbbbbbbbbbbbb500bab0000b9aab00022256527777777777777777
fbbbbffffff0bff0bff0bbbbff0000bfffbbff0bbbbbbbbbffffffffffffffff05575750bbbbbbbbbbbbbbb500ba9b000b99bbb0049925527777777777777777
fbbbbff00ff0bff0bff0bbbbff0000bfffbbff0bbbbbbbbb00ffff0000ffff00fff050ffbbbbbbbbbbbbbbb500b99b0000bb0000494925207777777777777777
fbbbbff00ff0bff0bff0bbbbff0bbbbffffbff0bbbbbbbbb055fff5005ffff5000fffff0bbbbbbbbbbbbbbb5000bb00000000000414922407777777777777777
fbbbbff04ff0bff0bff0bbbbffffbbbff0f0ff0bbbbbbbbb555505500550555505500550bbbbbbbbbbbbbbb50000000000000000044994447777777777777777
fbbbbff0bff0bff0bff0bbbbffff0bbff0ffff0bbbbbbbbb002ccc700005505555500000bbbbbbbbbbbbbbb5000000000000000000eeee0000eeee0000333300
fbbbbff0bff0bff0bff0bbbbff000bbff0bfff0bbbbbbbbb02cccccc0002292225550000bbbbbbbbbbbbbbb5000bb000000000000eee9ee00eeeaee033bbbb33
fbbbbffffff0bff0bff0bbbbff000bbff0bfff0bbbbbbbbb2c76cbbb0005595525715000bbbbbbbbbbbbbbb500b99b00000bbb00e9e999e9e7eaaa7a3bbaabb3
fbbbbffffff0bff0bff0bbbbff0bbbbff0bbff0bbbbbbbbb0776bbb00005545555575500bbbbbbbbbbbbbbb500b9ab000bbb99b0e9e999e9e7eaaa7a03bbbb30
fbbbbff00ff0bff0bff0bbbbff0bbbbff0bbff0bbbbbbbbb1dccdb000005545595555500bbbbbbbbbbbbbbb5000bab0000baa9b0eeee9eeee7eeae7e00333300
fbbbbff00ff0bff0bfffff0bfffff0bff0bbff0bbbbbbbbb1dccddd00005545911155000bbbbbbbbbbbbbbb5000bb0000000bb000bbeeeb00bb8e8b0eee88ee8
fbbbbff0bff0bff0bfffff0bfffff0bff0bbff0bbbbbbbbb1ddd44d00005545111555000bbbbbbbbbbbbbbb5000b0000000000000bb1b1b00bb1b1b08fe88ef8
fbbbb000b000b000b000000b000000b000bb000bbbbbbbbb01d444400005505555500000bbbbbbbbbbbbbbb5000000000000000000bbbb0000bbbb0008888880
fbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0b0bb0b00099999000099900000090000009990000999990
fbbbbbbbbbbbbbbbbbbbbbbbbfffffbbbbbbbbbbbbbbbbbbbbbffffbbbbbbbbbbbbbbbbbbbbbbbbbb3b33b3b0997a799009777900009a90000977a9009977a99
fbbbbffbbffbbffbbbbffbbbbffffffbbfffff00bbbbbbbbbbbffffbbbffffbbbbbbbbbbbbbbbbbbb33cc33b097a0a790097a6900009a90000977a90097777a9
fbbbbff0bff0bff0bbffffbbbffffffbbffffff0bfffffff0bffffffbbfffffbbbbbbbbbbbbbbbbbb3cccc3b097a0a790097a6900009a90000977a90097777a9
fbbbbff0bff0bff0bffffffbbffffffbbffffff0bfffffff0bffffffbbfffffbbbbbbbbbbbbbbbbbb3c77c3b097a0a790097a6900009a90000977a90097777a9
fbbbbff0bff0bff0bffffffbbff00ff0bff00ff0bff000000bff00ff0bfffffbbbbbbbbbbbbbbbbbbb3883bb097a0a790097a6900009f90000977a90097777a9
fbbbbff0bff0bff0bff00ff0bff00ff0bff00ff0bff000000bff00ff0bf00ff0bbbbbbbbbbbbbbbbbbb33bb00997a799009966900009a90000977a9009977a99
fbbbbff0bff0bff0bff00ff0bff0bff0bff0bff0bff0bbbbbbff0bff0bf00ff0bbbbbbbbbbbbbbbbb0bbbb000099999000099900000090000009990000999990
fbbbbff0bff0bff0bff0bff0bff0fff0bff0bff0bff0bbbbbbff0bff0bf0bff0bbbbbbbbbbbbbbbbb00040500000009c9000000000bbbbb0000fffff00000000
fbbbbff0bff0bff0bff0bff0bff0fff0bff0fff0bff0bbbbbbff0bff0bf0fff0bbbbbbbbbbbbbbbbb0555550000999aca99900000bb8888b00f4440000006000
fbbbbff0bff0bff0bff0bff0bff0ff00bff0ff00bffffff0bbff0bff0bf0fff0bbbbbbbbbbbbbbbbb5555550009ccc5c5ccc9000bb8aa8b00f44444000076000
fbbbbff0bff0bff0bff0bff0bff0fff0bff0fff0bffffff0bbff0bff0bf0ff00bbbbbbbbbbbbbbbbb00555500088cc8c8cc88000b8a7aa8bf444044400777600
fbbbbff0bff0bff0bff0bff0bff0bff0bff0bff0bffffff0bbff0bff0bf0fff0bbbbbbbbbbbbbbbbb000b05008889cacac988800b8a7aa8bf440004400776600
fbbbbff0bff0bff0bffffff0bff0bff0bff0bff0bff00000bbff0bff0bf0bff0bbbbbbbbbbbbbbbbb000b00000889ca9ac988000bb8aa8b0f444044400776000
fbbbbff0bff0bff0bffffff0bff0bff0bff0bff0bff00000bbff0bff0bf0bff0bbbbbbbbbbbbbbbbb000b0000009cc909cc900000bb8888bf044444000060000
fbbbbff0bff0bff0bffffff0bff0bff0bff0bff0bff0bbbbbbffffff0bf0bff0bbbbbbbbbbbbbbbbb000b000000088000880000000bbbbb0f004440000000000
fbbbbff0bff0bff0bff00ff0bff0bff0bff0bff0bff0bbbbbbffffff0bf0bff0bbbbbbbbbbbbbbbbbffbbbb5000000000000000044444444f000000000000000
fbbbbffffffffff0bff00ff0bff0bff0bff0bff0bff0bbbbbb0ffff00bf0bff0bbbbbbbbbbbbbbbbbffbbbb5081919189910000099500599f000000000000000
fbbbbffffffffff0bff0bff0bff0bff0bff0bff0bff0bbbbbb0ffff00bf0bff0bbbbbbbbbbbbbbbbbff0bbb5881919181910000099955999f000000000666000
fbbbbbfff0bfff00bff0bff0b000b000bff0bff0bfffffff0bb00000bbf0bff0bbbbbbbbbbbbbbbbbff0bbb5081919189910000099999999f000000007777600
fbbbbbbf00bbf00bb000b000b000b000b000b000bfffffff0bb00000bb00b000bbbbbbbbbbbbbbbbb000bbb5081919181110000044444444f000000000777760
fbfbbbb00bbb00bbb000b000bbbbbbbbb000b000b00000000bbbbbbbbb00b000bbbbbbbbbbbbbbbbb000bfb5081999181000000000000000f000000000077600
fbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000555555555bbbbbbbbbbbbbbbbbbbbbbbbbbbbb5011111111000000000000000f000000000000000
d55555555555555555555555555555555555555bb55555555555555555555555555555555555555555555555000000000000000000000000f000000000000000
__gff__
00070717070707070000000000000000070707070706060600004000000000000707070707060606000000060000000000000f0f0f060606002000000000000000000000000000000016060000000000000000000000000000000000000700000000000000000600000600000000000000000000000000000000000000000000
0301030001000200000000000000000000000000000000000000000000000000000000000000030300000000000000000000000000000000000000000000000000000000000000000000000000000000808080800000000000000000000000008081818000000001000000000000000080818180000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001617000000000000
0000b0b1b2b3b4b5c9c9c9c9c900000000000000270000000000000000000000000000000000121200000000000000000000001617161700000000000000000000000000000016170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001617002627000000000000
0000c0c1c2c3c4c5c9c9c9c9ca00000000000000000000000000000000000000000000000000000000000000000000000000002627262700000000000000000000000000000026270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002627000000000000000000
0000d0d1d2d3d4d5d6d7d8d9ca0000000000000000000000000000121212000000000000000000005a5b5b5b5b5b5c000000000000000000000000001212121200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000e0e1e2e3e4e5e6e7e8e9ca000000000000000000000000005a5b5b5b5c000000000000000016176a6b6b6b6c00000000000000000000000000005a5b5b5c00000000000000000000000000000000000000000000000000000016170000000000000000000000000000000000000000000000000000000000000000000000
0000f0f1f2f3f4f5f6f7f8f9fa00000000000000000000000000006a6b6c00000000000000000026276a6b6b6b6c0000000000000000000000000000006a6c00000000000000000000000000005a5b5b5b5b5c000000000000000026270000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000006a6b6c00000000000016170000006a6b6b6b6c0000000012120000000000161700006a6c0000000000000000000000000000006a6b6b6c00000000161700000000000000000000000000000000005a5b5b5b5b5b5b5c000000000000000000000000000000
0000000000000000000000000000000000000000000000000000006a6b6c00000000005a5b5b5b5c006a6b6b6b6c0000000000000000000000262700006a6c0000000000000000000000000000006a6b6b6c0000000026270000000000000000000000000000000000006a6b6b6b6b6c00000000005a5b5b5c00005a5b5b5c00
0000000000000000000000000000000000000000000000005a5b5b5b5b5b5b5c000000006a6b6c00006a6b6b6b6c0000000000000000000000000000006a6c000000000000005a5b5c00000000006a6b6b6c0000000000000000000000000000000000000000000000006a6b6b6b6b6c0000000000006a6c000000006a6c0000
000000000000000000000000000000000000000000000000006a6b6b6b6b6c00000000006a6b6c00006a6b6b6b6c0016170000000000000000000020006a6c00000000000000007c0000000000006a6b6b6c0000000000000000000000000000000000121212000000006a6b6b6b6b6c0000000000006a6c000000006a6c0000
000000000060000000000000000607000000000000000000006a6b6b6b6b6c00001200006a6b6c00006a6b6b6b6c0026270000000000000000000000006a6c00000000000000007c0000000000006a6b6b6c00000000000000000000000000000000005a5b5b5c0000006a6b6b6b6b6c0000000000006a6c000000006a6c1617
004647480070000000000000001617000000005b5b5c0000006a6b6b6b6b6c005a5b5c006a6b6c00006a6b6b6b6c0000000000000000000000000000006a6c00000000000000007c0000000000006a6b6b6c0000000000000000000000000016170000006a6c000000006a6b6b6b6b6c0000000000006a6c000000006a6c2627
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f0000006a6c000000006a6b6b6b6b6c00007c00006a6b6c00006a6b6b6b6c000000005a5b5b5c00000000005a5b5b5b5c005a5b5b5b5c007c0000000000006a6b6b6c0000000000000000000000000026270000006a6c000000006a6b6b6b6b6c00005a5b5c006a6c000000006a6c0000
3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f0000006a6c000000006a6b6b6b6b6c00007c00006a6b6c00006a6b6b6b6c00000000006a6c000000000000006a6b6c0000006a6b6c00007c0000000000006a6b6b6c0000000000000000000000000000000000006a6c000000006a6b6b6b6b6c0000007c00006a6c000000006a6c0000
000000000000000000000000000000000000000000000000000000000000000000000000000000ff8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8fff92939293929392939293a69797978f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000161700ff8383838383838383838383838383838383838383838383838383ffa4a4a4a4a4a4a4a4a4a4a4a4a4a40f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000
000000000000000000000016170000000000000000000000000000000016170000000000262700ff8383838383838383838383838383838383838383838383838383ff9494949494949494949494949494940f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000
000000000000000000000026270000000000001617001617000000000026270000000000000000ff8383838383838383838383838383838383838383838383838383ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a40f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000002627002627343500000000000000000000000000ffffa7a7a72425a7a7a7a7a7a7a7868686a7a7a7a7838383a786a7ff9494949494949494949494949494940f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000
0000000000161700000000000000000000000000000000000037000000000000cecbcf00000000ffff8383832425a7a7a78690909100000000000000838383a786a7ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a40f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000
0000000000262700000000000000002222000000000000000037000000000000dfdcde00000000ffff8c83832425a786868690910000000000000083838383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b20f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000222200000000000000003700000000cecbcccccccbcf0000ff9b9c83832425a7868686a0000000000000008383838383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000002222222200000000000000003700000000dfdddcdddcddde0000ffabac83832425a786868600000000000083838383838383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000002222222200000000000000003700000000dfddddddddddde0000ff83bc28292425a786868600000000008383838383838383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000002222222222220000000000000000370000cecbcccccccccccccccbcfff838338392425a786868600000083838383838383838383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b1b10000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000002222222222220000000000000000370000dfdddddddddddddddddddeffa7a7a7a7a7a7a786868600141583831415838314158383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000002222222222220000000000000000370000dfdeebdfdeebdfdeebdfdeff8686868686868686868600242583832425838324258383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000002222222222220000000000000000220000dfdeebdfdeebdfdeebdfdeff8686868686868686868600242583832425838324258383a786a7ffb40000000000b3b0b40000000000b3b1b1b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000010101010101010101010101010101010101010101010101010101010101010101010101010ff8484848484848484848484848484848484848484848484848484ff94949494949494949494949494949400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000010101010101010101010101010101010101010101010101010101010101010101010101010ff8484848484848484848484848484848484848484848484848484ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000d8d9dadbd8d9dadbe8e9eaebecedeeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010600002806028000280601f0003000034000280600f0001c0002400024060280652800516005140052b06412005120050f0050f0050f0050f0050f0050d0051f0651f30501005010051d0001f0002100023003
010b0000247601d0000c6040c6040c6040c0001f7600c0000c6040c0000c6040c0001c7600c6000c6040c0000c6040c000217600c0000c6040c000237600c0000c6040c000227600c000217600c0000c60400000
010b00001f7600200228760020022b760020022d76002002020020200229760297002b7602b700020020200228760287000500205002247600e00026760050022376005002050020500205002050020500205002
011000002d1752d145000002d1752d135000002d1752d135000002d1752d13500000301703014130131301222b1752b145000002b1752b135000002b1752b155000002b1352b1750000028175281452b1752b145
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000001235712357123571235712357123571235712357127501275012650125501245012350123521235212351123511235112351123511235712351123511235112351123511235112351123561235612357
011000002125221411214512145121451214512145121451214512145121451214512145121451214512145121451214512145121451214512145121451214512145121451214511f4511f4511f4512145121451
010d000020051290412d0110e0000d0000d0001a0001a0001a0001a0001a0001c0001c0001c0001d0001d0001d0001d0001d00025200252002b2002d2002f2002320023200212001f20021200211002100021000
011000001563613626226261361618000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01030000390303e0403e0403904039040390303903039030390303902039020390100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000300003a7603a7603a7503a750307503075030750307503074037740377303773037730377303a7303a7303a7303a7303a7303c7303c7303c7303c7303c7303c7303f7303f7303f7303f7303f7203f7203f720
010b000018766117641f7660e764117261c7241c7560c744137361d724297061c706297061c706107041a7041a5020e5021f50213002000000000000000000000000000000000000000000000000000000000000
010400001c0511d000220002701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010400002f44137424000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010600002833028335000002833028335000000000000000000002833028335000000000000000000002433024335000002833028335000000000000000000002b3302b335000000000000000000000000000000
010600001e3301e335000001e3301e335000003662500000000001e3301e335000000000000000000001e3301e335000001e3301e335000000000000000000002333023335000000000000000000000000000000
01060000000000000000000000000000000000000000000000000000000000000000000000000000000000002433024335000000000000000000000000000000000001f3301f3350000000000000000000000000
01060000000003662500000000001f3301f335000003662500000000003662500000000003662500000000001c3301c3350000000000000000000036625000000000018330366250000036625000000000000000
0106000000000000001c3301c33500000000000000000000000000000000000213302133500000000000000000000233302333500000000000000000000223302233500000213302133500000000000000000000
0106000000000000001333013335000000000036625000003662500000000001833018335000003662500000000001a3303662500000366250000000000193301933500000183301833500000000003662500000
010600001f3301f3350000000000283302833500000000002b3302b33500000000002d3302d335000000000000000000002933029335000002b3302b335000000000000000000002833028335000000000000000
01060000183301833500000000001f3301f3353662500000233302333536625000002433024335000000000000000000002133021335000002333036625000003662500000000002133021335000003662500000
01060000000002433024335000002633026335000002333023335000000000000000000000000000000000002433024335000000000000000000000000000000000001f3301f3350000000000000000000000000
01060000000001c33036625000001d3301d335000001a3301a335000003662500000000000000036625000001c3301c3350000000000000000000036625000000000018330366250000036625000000000000000
01060000000002433024335000002633026335000002333023335000000000000000000000000000000000000000000000000000000000000000002b3302b335000002a3302a3350000029330293350000027330
01060000000001c33036625000001d3301d335000001a3301a3350000036625000000000000000366250000036625000000000000000000000000028330283350000027330366250000026330263350000023330
010600002733500000000000000000000283302833500000000000000000000203302033500000213302133500000243302433500000000000000000000213302133500000243302433500000263302633500000
0106000023335000003662500000000002433036625000003662500000000001c3301c335000001d3301d335000001f33036625000003662500000000001833018335000001c3301c335000001d3303662500000
010600000000000000000000000000000000002b3302b335000002a3302a335000002933029335000002733027335000000000000000000002833028335000000000000000000003033030335000000000000000
010600003662500000000000000000000000002833028335000002733036625000002633026335000002333023335000003662500000000002433036625000003662500000000002933029335000003662500000
01060000000003033030335000003033030335000000000000000000000000000000000000000000000000000000000000000000000000000000002b3002b305000002a3002a3050000029300293050000027300
010600000000029330366250000029330293350000000000000000000036605000000000000000366050000036605000000000000000000000000028300283050000027300366050000026300263050000023300
010700000c1400c1400c1451814018140181450914009140091451514015140151450a1400a1400a1451614016140161450000000000000000000000000000000000000000000000000000000000000000000000
01070000000000000000000000000c1400c1400c1451814018140181450914009140091451514015140151450a1400a1400a14516140161401614500000000000000000000000000000000000000000000000000
0107000000000000000000000000000000000000000000000514005140051451114011140111450214002140021450e1400e1400e1450314003140031450f1400f1400f145000000000000000000000000000000
010700000000000000000000000000000000000000000000000000000000000000000514005140051451114011140111450214002140021450e1400e1400e1450314003140031450f1400f1400f1450000000000
01070000000000000000000000000000000000000000000000000000000f1400f1450e1400e1450d1400d1450c1400c145000000000000000000000f1400f145000000000000000000000e1400e1450000000000
0107000000000000000814008145000000000000000000000714007145000000000000000000000d1400d145000000000000000000000c1400c14512140121451114011145101401014516140161451514015145
01070000141401414014140141450f1400f1400f1400f1450b1400b1400b1400b1450a1400a1400a1400a14509140091400914009145081400814008140081450000000000000000000000000000000000000000
01070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1400c1400c14518140
0107000018140181450914009140091451514015140151450a1400a1400a145161401614016145000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01070000000000000000000000000514005140051451114011140111450214002140021450e1400e1400e1450314003140031450f1400f1400f14500000000000000000000000000000000000000000000000000
010700000000000000000000000000000000000f1400f1450e1400e1450d1400d1450c1400c145000000000000000000000f1400f145000000000000000000000e1400e145000000000000000000000814008145
01070000000000000000000000000714007145000000000000000000000d1400d145000000000000000000000c1400c1451214012145111401114510140101451614016145151401514514140141401414014145
010700000f1400f1400f1400f1450b1400b1400b1400b1450a1400a1400a1400a1450914009140091400914508140081400814008145000000000000000000000000000000000000000000000000000000000000
010400002414024140241450000000000000002414024140241450000000000000002414024140241450000000000000001a1401a1401a1452414024140241450000000000000002414024140241450000000000
010400002114021140211450000000000000002114021140211450000036625000002114021140211450000000000000003662500000000002114036625000003662500000000002114021140211453662500000
010400001d1401d1401d1450000000000000001d1401d1401d1450000000000000001d1401d1401d1450000000000000000000000000000001d1401d1401d1450000000000000001d1401d1401d1450000000000
01040000000001a1401a1401a1452414024140241451a1401a1401a14524140241402414500000000000000023140231402314500000000000000023140231402314500000000000000023140231402314500000
01040000000000000036625000002114021140211450000000000000002114021140211450000036625000001f1401f1401f1450000000000000001f1401f1401f1450000036625000001f1401f1401f14500000
01040000000000000000000000001d1401d1401d1450000000000000001d1401d1401d1450000000000000001c1401c1401c1450000000000000001c1401c1401c1450000000000000001c1401c1401c14500000
010400000000000000181401814018145231402314023145000000000000000231402314023145000000000000000181401814018145231402314023145181401814018145231402314023145000000000000000
0104000000000000003662500000000001f14036625000003662500000000001f1401f1401f1453662500000000000000036625000001f1401f1401f1450000000000000001f1401f1401f145000003662500000
000a0000263201f320213201f320203201f320213201f320263201f320273201f320263201f320253201f320223201f320213201f320203201f320213201f320263201f320273201f320263201f320253201f320
010a00002232000000253200000024320000002532000000223200000023320000002232000000213200000026320000002532000000243200000025320000002232000000233200000022320000002132000000
010a00000f3200f3200f3200f3200f3200f3200f3200f3200f3200f3200f3200f3200f3200f3200f3200f3250e3200e3200e3200e3200e3200e3200e3200e3251232012320123201232012320123201232012325
010a0000213101e310203101e310253101e310263101e310253101e310263101e310253101e310243101e310213101e310203101e310253101e310263101e310253101e310263101e310253101e310243101e310
010a00002534000000243400000021340000002234000000213400000022340000002134000000203400000025340000002434000000213400000022340000002134000000223400000021340000002034000000
010a00001134011340113401134011340113401134011340113401134011340113401134011340113401134510340103401034010340103401034010340103451634016340163401634016340163401634016345
010a000029340223402a3402234029340223402434022340293402234028340223402334022340283402234025340223402a34022340293402234024340223402934022340243402234023340223402834022340
010a00002534000000263400000025340000002834000000253400000024340000002734000000243400000029340000002634000000253400000028340000002534000000283400000027340000002434000000
010a0000153401534015340153401534015340153401534510340103401034010340103401034010340103450f3400f3400f3400f3400f3400f3400f3400f3451034010340103401034010340103401034010345
010a00002234000000253403062524340000002534000000223400000023340000002234000000213400000026340000002534030625243400000025340000002234000000233400000022340000002134000000
010a00000f3400f34530625000003062500000306250000030625000003062500000306250000030625000000e3400e3453062500000306250000030625000001234012345306250000030625000003062500000
__music__
01 0e0f4244
00 10114544
00 12134844
00 14154b44
00 16174e44
00 12134844
00 14154b44
00 18195144
00 1a1b5444
00 1c1d5744
02 1e1f5a44
01 205b5444
00 215d5d44
00 225f6044
00 23615444
00 24565744
00 25595a44
00 26535444
00 27625d44
00 28646544
00 29676844
00 2a6a6b44
00 2b6d6e44
02 2c676844
01 2d2e2f44
00 30313244
02 33347544
00 494a4b44
00 4c4d4e44
00 46474844
00 494a4b44
00 6f707144
00 72737444
00 75767744
00 78797a44
00 72737444
00 7b7c7d44
00 7e7f4344

